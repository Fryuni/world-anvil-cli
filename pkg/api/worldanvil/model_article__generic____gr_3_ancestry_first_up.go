/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ArticleGenericGR3AncestryFirstUp - struct for ArticleGenericGR3AncestryFirstUp
type ArticleGenericGR3AncestryFirstUp struct {
	ArticleRef *ArticleRef
	ERRORUNKNOWN *ERRORUNKNOWN
}

// ArticleRefAsArticleGenericGR3AncestryFirstUp is a convenience function that returns ArticleRef wrapped in ArticleGenericGR3AncestryFirstUp
func ArticleRefAsArticleGenericGR3AncestryFirstUp(v *ArticleRef) ArticleGenericGR3AncestryFirstUp {
	return ArticleGenericGR3AncestryFirstUp{
		ArticleRef: v,
	}
}

// ERRORUNKNOWNAsArticleGenericGR3AncestryFirstUp is a convenience function that returns ERRORUNKNOWN wrapped in ArticleGenericGR3AncestryFirstUp
func ERRORUNKNOWNAsArticleGenericGR3AncestryFirstUp(v *ERRORUNKNOWN) ArticleGenericGR3AncestryFirstUp {
	return ArticleGenericGR3AncestryFirstUp{
		ERRORUNKNOWN: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ArticleGenericGR3AncestryFirstUp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArticleRef
	err = newStrictDecoder(data).Decode(&dst.ArticleRef)
	if err == nil {
		jsonArticleRef, _ := json.Marshal(dst.ArticleRef)
		if string(jsonArticleRef) == "{}" { // empty struct
			dst.ArticleRef = nil
		} else {
			if err = validator.Validate(dst.ArticleRef); err != nil {
				dst.ArticleRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArticleRef = nil
	}

	// try to unmarshal data into ERRORUNKNOWN
	err = newStrictDecoder(data).Decode(&dst.ERRORUNKNOWN)
	if err == nil {
		jsonERRORUNKNOWN, _ := json.Marshal(dst.ERRORUNKNOWN)
		if string(jsonERRORUNKNOWN) == "{}" { // empty struct
			dst.ERRORUNKNOWN = nil
		} else {
			if err = validator.Validate(dst.ERRORUNKNOWN); err != nil {
				dst.ERRORUNKNOWN = nil
			} else {
				match++
			}
		}
	} else {
		dst.ERRORUNKNOWN = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArticleRef = nil
		dst.ERRORUNKNOWN = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ArticleGenericGR3AncestryFirstUp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ArticleGenericGR3AncestryFirstUp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ArticleGenericGR3AncestryFirstUp) MarshalJSON() ([]byte, error) {
	if src.ArticleRef != nil {
		return json.Marshal(&src.ArticleRef)
	}

	if src.ERRORUNKNOWN != nil {
		return json.Marshal(&src.ERRORUNKNOWN)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ArticleGenericGR3AncestryFirstUp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArticleRef != nil {
		return obj.ArticleRef
	}

	if obj.ERRORUNKNOWN != nil {
		return obj.ERRORUNKNOWN
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ArticleGenericGR3AncestryFirstUp) GetActualInstanceValue() (interface{}) {
	if obj.ArticleRef != nil {
		return *obj.ArticleRef
	}

	if obj.ERRORUNKNOWN != nil {
		return *obj.ERRORUNKNOWN
	}

	// all schemas are nil
	return nil
}

type NullableArticleGenericGR3AncestryFirstUp struct {
	value *ArticleGenericGR3AncestryFirstUp
	isSet bool
}

func (v NullableArticleGenericGR3AncestryFirstUp) Get() *ArticleGenericGR3AncestryFirstUp {
	return v.value
}

func (v *NullableArticleGenericGR3AncestryFirstUp) Set(val *ArticleGenericGR3AncestryFirstUp) {
	v.value = val
	v.isSet = true
}

func (v NullableArticleGenericGR3AncestryFirstUp) IsSet() bool {
	return v.isSet
}

func (v *NullableArticleGenericGR3AncestryFirstUp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticleGenericGR3AncestryFirstUp(val *ArticleGenericGR3AncestryFirstUp) *NullableArticleGenericGR3AncestryFirstUp {
	return &NullableArticleGenericGR3AncestryFirstUp{value: val, isSet: true}
}

func (v NullableArticleGenericGR3AncestryFirstUp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticleGenericGR3AncestryFirstUp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


