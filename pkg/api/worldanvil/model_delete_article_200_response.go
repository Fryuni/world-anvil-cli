/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
)

// checks if the DeleteArticle200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteArticle200Response{}

// DeleteArticle200Response struct for DeleteArticle200Response
type DeleteArticle200Response struct {
	Success *bool `json:"success,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeleteArticle200Response DeleteArticle200Response

// NewDeleteArticle200Response instantiates a new DeleteArticle200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteArticle200Response() *DeleteArticle200Response {
	this := DeleteArticle200Response{}
	var success bool = true
	this.Success = &success
	return &this
}

// NewDeleteArticle200ResponseWithDefaults instantiates a new DeleteArticle200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteArticle200ResponseWithDefaults() *DeleteArticle200Response {
	this := DeleteArticle200Response{}
	var success bool = true
	this.Success = &success
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *DeleteArticle200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteArticle200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *DeleteArticle200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *DeleteArticle200Response) SetSuccess(v bool) {
	o.Success = &v
}

func (o DeleteArticle200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteArticle200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeleteArticle200Response) UnmarshalJSON(data []byte) (err error) {
	varDeleteArticle200Response := _DeleteArticle200Response{}

	err = json.Unmarshal(data, &varDeleteArticle200Response)

	if err != nil {
		return err
	}

	*o = DeleteArticle200Response(varDeleteArticle200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeleteArticle200Response struct {
	value *DeleteArticle200Response
	isSet bool
}

func (v NullableDeleteArticle200Response) Get() *DeleteArticle200Response {
	return v.value
}

func (v *NullableDeleteArticle200Response) Set(val *DeleteArticle200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteArticle200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteArticle200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteArticle200Response(val *DeleteArticle200Response) *NullableDeleteArticle200Response {
	return &NullableDeleteArticle200Response{value: val, isSet: true}
}

func (v NullableDeleteArticle200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteArticle200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


