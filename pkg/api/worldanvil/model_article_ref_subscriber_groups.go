/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
)

// checks if the ArticleRefSubscriberGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArticleRefSubscriberGroups{}

// ArticleRefSubscriberGroups struct for ArticleRefSubscriberGroups
type ArticleRefSubscriberGroups struct {
	Subscribergroups []Object `json:"subscribergroups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ArticleRefSubscriberGroups ArticleRefSubscriberGroups

// NewArticleRefSubscriberGroups instantiates a new ArticleRefSubscriberGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticleRefSubscriberGroups() *ArticleRefSubscriberGroups {
	this := ArticleRefSubscriberGroups{}
	return &this
}

// NewArticleRefSubscriberGroupsWithDefaults instantiates a new ArticleRefSubscriberGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticleRefSubscriberGroupsWithDefaults() *ArticleRefSubscriberGroups {
	this := ArticleRefSubscriberGroups{}
	return &this
}

// GetSubscribergroups returns the Subscribergroups field value if set, zero value otherwise.
func (o *ArticleRefSubscriberGroups) GetSubscribergroups() []Object {
	if o == nil || IsNil(o.Subscribergroups) {
		var ret []Object
		return ret
	}
	return o.Subscribergroups
}

// GetSubscribergroupsOk returns a tuple with the Subscribergroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleRefSubscriberGroups) GetSubscribergroupsOk() ([]Object, bool) {
	if o == nil || IsNil(o.Subscribergroups) {
		return nil, false
	}
	return o.Subscribergroups, true
}

// HasSubscribergroups returns a boolean if a field has been set.
func (o *ArticleRefSubscriberGroups) HasSubscribergroups() bool {
	if o != nil && !IsNil(o.Subscribergroups) {
		return true
	}

	return false
}

// SetSubscribergroups gets a reference to the given []Object and assigns it to the Subscribergroups field.
func (o *ArticleRefSubscriberGroups) SetSubscribergroups(v []Object) {
	o.Subscribergroups = v
}

func (o ArticleRefSubscriberGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArticleRefSubscriberGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subscribergroups) {
		toSerialize["subscribergroups"] = o.Subscribergroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArticleRefSubscriberGroups) UnmarshalJSON(data []byte) (err error) {
	varArticleRefSubscriberGroups := _ArticleRefSubscriberGroups{}

	err = json.Unmarshal(data, &varArticleRefSubscriberGroups)

	if err != nil {
		return err
	}

	*o = ArticleRefSubscriberGroups(varArticleRefSubscriberGroups)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subscribergroups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArticleRefSubscriberGroups struct {
	value *ArticleRefSubscriberGroups
	isSet bool
}

func (v NullableArticleRefSubscriberGroups) Get() *ArticleRefSubscriberGroups {
	return v.value
}

func (v *NullableArticleRefSubscriberGroups) Set(val *ArticleRefSubscriberGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableArticleRefSubscriberGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableArticleRefSubscriberGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticleRefSubscriberGroups(val *ArticleRefSubscriberGroups) *NullableArticleRefSubscriberGroups {
	return &NullableArticleRefSubscriberGroups{value: val, isSet: true}
}

func (v NullableArticleRefSubscriberGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticleRefSubscriberGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


