/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ReadBlock200Response - struct for ReadBlock200Response
type ReadBlock200Response struct {
	Block *Block
	BlockFull *BlockFull
	BlockReturnRef *BlockReturnRef
}

// BlockAsReadBlock200Response is a convenience function that returns Block wrapped in ReadBlock200Response
func BlockAsReadBlock200Response(v *Block) ReadBlock200Response {
	return ReadBlock200Response{
		Block: v,
	}
}

// BlockFullAsReadBlock200Response is a convenience function that returns BlockFull wrapped in ReadBlock200Response
func BlockFullAsReadBlock200Response(v *BlockFull) ReadBlock200Response {
	return ReadBlock200Response{
		BlockFull: v,
	}
}

// BlockReturnRefAsReadBlock200Response is a convenience function that returns BlockReturnRef wrapped in ReadBlock200Response
func BlockReturnRefAsReadBlock200Response(v *BlockReturnRef) ReadBlock200Response {
	return ReadBlock200Response{
		BlockReturnRef: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReadBlock200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Block
	err = newStrictDecoder(data).Decode(&dst.Block)
	if err == nil {
		jsonBlock, _ := json.Marshal(dst.Block)
		if string(jsonBlock) == "{}" { // empty struct
			dst.Block = nil
		} else {
			if err = validator.Validate(dst.Block); err != nil {
				dst.Block = nil
			} else {
				match++
			}
		}
	} else {
		dst.Block = nil
	}

	// try to unmarshal data into BlockFull
	err = newStrictDecoder(data).Decode(&dst.BlockFull)
	if err == nil {
		jsonBlockFull, _ := json.Marshal(dst.BlockFull)
		if string(jsonBlockFull) == "{}" { // empty struct
			dst.BlockFull = nil
		} else {
			if err = validator.Validate(dst.BlockFull); err != nil {
				dst.BlockFull = nil
			} else {
				match++
			}
		}
	} else {
		dst.BlockFull = nil
	}

	// try to unmarshal data into BlockReturnRef
	err = newStrictDecoder(data).Decode(&dst.BlockReturnRef)
	if err == nil {
		jsonBlockReturnRef, _ := json.Marshal(dst.BlockReturnRef)
		if string(jsonBlockReturnRef) == "{}" { // empty struct
			dst.BlockReturnRef = nil
		} else {
			if err = validator.Validate(dst.BlockReturnRef); err != nil {
				dst.BlockReturnRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.BlockReturnRef = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Block = nil
		dst.BlockFull = nil
		dst.BlockReturnRef = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReadBlock200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReadBlock200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReadBlock200Response) MarshalJSON() ([]byte, error) {
	if src.Block != nil {
		return json.Marshal(&src.Block)
	}

	if src.BlockFull != nil {
		return json.Marshal(&src.BlockFull)
	}

	if src.BlockReturnRef != nil {
		return json.Marshal(&src.BlockReturnRef)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReadBlock200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Block != nil {
		return obj.Block
	}

	if obj.BlockFull != nil {
		return obj.BlockFull
	}

	if obj.BlockReturnRef != nil {
		return obj.BlockReturnRef
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ReadBlock200Response) GetActualInstanceValue() (interface{}) {
	if obj.Block != nil {
		return *obj.Block
	}

	if obj.BlockFull != nil {
		return *obj.BlockFull
	}

	if obj.BlockReturnRef != nil {
		return *obj.BlockReturnRef
	}

	// all schemas are nil
	return nil
}

type NullableReadBlock200Response struct {
	value *ReadBlock200Response
	isSet bool
}

func (v NullableReadBlock200Response) Get() *ReadBlock200Response {
	return v.value
}

func (v *NullableReadBlock200Response) Set(val *ReadBlock200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableReadBlock200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableReadBlock200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadBlock200Response(val *ReadBlock200Response) *NullableReadBlock200Response {
	return &NullableReadBlock200Response{value: val, isSet: true}
}

func (v NullableReadBlock200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadBlock200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


