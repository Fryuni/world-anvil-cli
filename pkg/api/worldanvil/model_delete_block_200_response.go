/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
)

// checks if the DeleteBlock200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteBlock200Response{}

// DeleteBlock200Response struct for DeleteBlock200Response
type DeleteBlock200Response struct {
	Success *bool `json:"success,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeleteBlock200Response DeleteBlock200Response

// NewDeleteBlock200Response instantiates a new DeleteBlock200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteBlock200Response() *DeleteBlock200Response {
	this := DeleteBlock200Response{}
	return &this
}

// NewDeleteBlock200ResponseWithDefaults instantiates a new DeleteBlock200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteBlock200ResponseWithDefaults() *DeleteBlock200Response {
	this := DeleteBlock200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *DeleteBlock200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteBlock200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *DeleteBlock200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *DeleteBlock200Response) SetSuccess(v bool) {
	o.Success = &v
}

func (o DeleteBlock200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteBlock200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeleteBlock200Response) UnmarshalJSON(data []byte) (err error) {
	varDeleteBlock200Response := _DeleteBlock200Response{}

	err = json.Unmarshal(data, &varDeleteBlock200Response)

	if err != nil {
		return err
	}

	*o = DeleteBlock200Response(varDeleteBlock200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeleteBlock200Response struct {
	value *DeleteBlock200Response
	isSet bool
}

func (v NullableDeleteBlock200Response) Get() *DeleteBlock200Response {
	return v.value
}

func (v *NullableDeleteBlock200Response) Set(val *DeleteBlock200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteBlock200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteBlock200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteBlock200Response(val *DeleteBlock200Response) *NullableDeleteBlock200Response {
	return &NullableDeleteBlock200Response{value: val, isSet: true}
}

func (v NullableDeleteBlock200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteBlock200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


