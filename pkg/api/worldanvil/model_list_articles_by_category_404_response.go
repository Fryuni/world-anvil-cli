/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
)

// checks if the ListArticlesByCategory404Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListArticlesByCategory404Response{}

// ListArticlesByCategory404Response struct for ListArticlesByCategory404Response
type ListArticlesByCategory404Response struct {
	Success *bool `json:"success,omitempty"`
	Error *string `json:"error,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListArticlesByCategory404Response ListArticlesByCategory404Response

// NewListArticlesByCategory404Response instantiates a new ListArticlesByCategory404Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListArticlesByCategory404Response() *ListArticlesByCategory404Response {
	this := ListArticlesByCategory404Response{}
	var success bool = false
	this.Success = &success
	var error_ string = "resource_not_found"
	this.Error = &error_
	return &this
}

// NewListArticlesByCategory404ResponseWithDefaults instantiates a new ListArticlesByCategory404Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListArticlesByCategory404ResponseWithDefaults() *ListArticlesByCategory404Response {
	this := ListArticlesByCategory404Response{}
	var success bool = false
	this.Success = &success
	var error_ string = "resource_not_found"
	this.Error = &error_
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ListArticlesByCategory404Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListArticlesByCategory404Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ListArticlesByCategory404Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ListArticlesByCategory404Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ListArticlesByCategory404Response) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListArticlesByCategory404Response) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ListArticlesByCategory404Response) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ListArticlesByCategory404Response) SetError(v string) {
	o.Error = &v
}

func (o ListArticlesByCategory404Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListArticlesByCategory404Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListArticlesByCategory404Response) UnmarshalJSON(data []byte) (err error) {
	varListArticlesByCategory404Response := _ListArticlesByCategory404Response{}

	err = json.Unmarshal(data, &varListArticlesByCategory404Response)

	if err != nil {
		return err
	}

	*o = ListArticlesByCategory404Response(varListArticlesByCategory404Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		delete(additionalProperties, "error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListArticlesByCategory404Response struct {
	value *ListArticlesByCategory404Response
	isSet bool
}

func (v NullableListArticlesByCategory404Response) Get() *ListArticlesByCategory404Response {
	return v.value
}

func (v *NullableListArticlesByCategory404Response) Set(val *ListArticlesByCategory404Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListArticlesByCategory404Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListArticlesByCategory404Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListArticlesByCategory404Response(val *ListArticlesByCategory404Response) *NullableListArticlesByCategory404Response {
	return &NullableListArticlesByCategory404Response{value: val, isSet: true}
}

func (v NullableListArticlesByCategory404Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListArticlesByCategory404Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


