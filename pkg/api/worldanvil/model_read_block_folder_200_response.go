/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ReadBlockFolder200Response - struct for ReadBlockFolder200Response
type ReadBlockFolder200Response struct {
	BlockFolder *BlockFolder
	BlockFolderFull *BlockFolderFull
	BlockFolderReturnRef *BlockFolderReturnRef
}

// BlockFolderAsReadBlockFolder200Response is a convenience function that returns BlockFolder wrapped in ReadBlockFolder200Response
func BlockFolderAsReadBlockFolder200Response(v *BlockFolder) ReadBlockFolder200Response {
	return ReadBlockFolder200Response{
		BlockFolder: v,
	}
}

// BlockFolderFullAsReadBlockFolder200Response is a convenience function that returns BlockFolderFull wrapped in ReadBlockFolder200Response
func BlockFolderFullAsReadBlockFolder200Response(v *BlockFolderFull) ReadBlockFolder200Response {
	return ReadBlockFolder200Response{
		BlockFolderFull: v,
	}
}

// BlockFolderReturnRefAsReadBlockFolder200Response is a convenience function that returns BlockFolderReturnRef wrapped in ReadBlockFolder200Response
func BlockFolderReturnRefAsReadBlockFolder200Response(v *BlockFolderReturnRef) ReadBlockFolder200Response {
	return ReadBlockFolder200Response{
		BlockFolderReturnRef: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReadBlockFolder200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BlockFolder
	err = newStrictDecoder(data).Decode(&dst.BlockFolder)
	if err == nil {
		jsonBlockFolder, _ := json.Marshal(dst.BlockFolder)
		if string(jsonBlockFolder) == "{}" { // empty struct
			dst.BlockFolder = nil
		} else {
			if err = validator.Validate(dst.BlockFolder); err != nil {
				dst.BlockFolder = nil
			} else {
				match++
			}
		}
	} else {
		dst.BlockFolder = nil
	}

	// try to unmarshal data into BlockFolderFull
	err = newStrictDecoder(data).Decode(&dst.BlockFolderFull)
	if err == nil {
		jsonBlockFolderFull, _ := json.Marshal(dst.BlockFolderFull)
		if string(jsonBlockFolderFull) == "{}" { // empty struct
			dst.BlockFolderFull = nil
		} else {
			if err = validator.Validate(dst.BlockFolderFull); err != nil {
				dst.BlockFolderFull = nil
			} else {
				match++
			}
		}
	} else {
		dst.BlockFolderFull = nil
	}

	// try to unmarshal data into BlockFolderReturnRef
	err = newStrictDecoder(data).Decode(&dst.BlockFolderReturnRef)
	if err == nil {
		jsonBlockFolderReturnRef, _ := json.Marshal(dst.BlockFolderReturnRef)
		if string(jsonBlockFolderReturnRef) == "{}" { // empty struct
			dst.BlockFolderReturnRef = nil
		} else {
			if err = validator.Validate(dst.BlockFolderReturnRef); err != nil {
				dst.BlockFolderReturnRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.BlockFolderReturnRef = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BlockFolder = nil
		dst.BlockFolderFull = nil
		dst.BlockFolderReturnRef = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReadBlockFolder200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReadBlockFolder200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReadBlockFolder200Response) MarshalJSON() ([]byte, error) {
	if src.BlockFolder != nil {
		return json.Marshal(&src.BlockFolder)
	}

	if src.BlockFolderFull != nil {
		return json.Marshal(&src.BlockFolderFull)
	}

	if src.BlockFolderReturnRef != nil {
		return json.Marshal(&src.BlockFolderReturnRef)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReadBlockFolder200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BlockFolder != nil {
		return obj.BlockFolder
	}

	if obj.BlockFolderFull != nil {
		return obj.BlockFolderFull
	}

	if obj.BlockFolderReturnRef != nil {
		return obj.BlockFolderReturnRef
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ReadBlockFolder200Response) GetActualInstanceValue() (interface{}) {
	if obj.BlockFolder != nil {
		return *obj.BlockFolder
	}

	if obj.BlockFolderFull != nil {
		return *obj.BlockFolderFull
	}

	if obj.BlockFolderReturnRef != nil {
		return *obj.BlockFolderReturnRef
	}

	// all schemas are nil
	return nil
}

type NullableReadBlockFolder200Response struct {
	value *ReadBlockFolder200Response
	isSet bool
}

func (v NullableReadBlockFolder200Response) Get() *ReadBlockFolder200Response {
	return v.value
}

func (v *NullableReadBlockFolder200Response) Set(val *ReadBlockFolder200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableReadBlockFolder200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableReadBlockFolder200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadBlockFolder200Response(val *ReadBlockFolder200Response) *NullableReadBlockFolder200Response {
	return &NullableReadBlockFolder200Response{value: val, isSet: true}
}

func (v NullableReadBlockFolder200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadBlockFolder200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


