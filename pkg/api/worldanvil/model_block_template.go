/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
)

// checks if the BlockTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockTemplate{}

// BlockTemplate struct for BlockTemplate
type BlockTemplate struct {
	Id *int32 `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Slug NullableString `json:"slug,omitempty"`
	State NullableString `json:"state,omitempty"`
	IsWip NullableString `json:"isWip,omitempty"`
	IsDraft NullableString `json:"isDraft,omitempty"`
	EntityClass *string `json:"entityClass,omitempty"`
	Icon *string `json:"icon,omitempty"`
	Url NullableString `json:"url,omitempty"`
	Subscribergroups []string `json:"subscribergroups,omitempty"`
	FolderId NullableString `json:"folderId,omitempty"`
	Tags NullableString `json:"tags,omitempty"`
	UpdateDate *Object `json:"updateDate,omitempty"`
	IsEditable NullableString `json:"isEditable,omitempty"`
	Success NullableString `json:"success,omitempty"`
	Listtitle NullableString `json:"listtitle,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	Description NullableString `json:"description,omitempty"`
	ArticleTemplate NullableString `json:"articleTemplate,omitempty"`
	FormSchemaParser *string `json:"formSchemaParser,omitempty"`
	FormSchema *string `json:"formSchema,omitempty"`
	FormDisplayStructure NullableString `json:"formDisplayStructure,omitempty"`
	DisplayStructure NullableString `json:"displayStructure,omitempty"`
	DisplayBadge NullableString `json:"displayBadge,omitempty"`
	DisplayStyling NullableString `json:"displayStyling,omitempty"`
	DisplayScripting NullableString `json:"displayScripting,omitempty"`
	DisplayTrackable NullableString `json:"displayTrackable,omitempty"`
	DisplayStylingRaw NullableString `json:"displayStylingRaw,omitempty"`
	HasRawJson *bool `json:"hasRawJson,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BlockTemplate BlockTemplate

// NewBlockTemplate instantiates a new BlockTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockTemplate() *BlockTemplate {
	this := BlockTemplate{}
	return &this
}

// NewBlockTemplateWithDefaults instantiates a new BlockTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockTemplateWithDefaults() *BlockTemplate {
	this := BlockTemplate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BlockTemplate) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BlockTemplate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BlockTemplate) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *BlockTemplate) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *BlockTemplate) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *BlockTemplate) SetTitle(v string) {
	o.Title = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetSlug() string {
	if o == nil || IsNil(o.Slug.Get()) {
		var ret string
		return ret
	}
	return *o.Slug.Get()
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slug.Get(), o.Slug.IsSet()
}

// HasSlug returns a boolean if a field has been set.
func (o *BlockTemplate) HasSlug() bool {
	if o != nil && o.Slug.IsSet() {
		return true
	}

	return false
}

// SetSlug gets a reference to the given NullableString and assigns it to the Slug field.
func (o *BlockTemplate) SetSlug(v string) {
	o.Slug.Set(&v)
}
// SetSlugNil sets the value for Slug to be an explicit nil
func (o *BlockTemplate) SetSlugNil() {
	o.Slug.Set(nil)
}

// UnsetSlug ensures that no value is present for Slug, not even an explicit nil
func (o *BlockTemplate) UnsetSlug() {
	o.Slug.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *BlockTemplate) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *BlockTemplate) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *BlockTemplate) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *BlockTemplate) UnsetState() {
	o.State.Unset()
}

// GetIsWip returns the IsWip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetIsWip() string {
	if o == nil || IsNil(o.IsWip.Get()) {
		var ret string
		return ret
	}
	return *o.IsWip.Get()
}

// GetIsWipOk returns a tuple with the IsWip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetIsWipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsWip.Get(), o.IsWip.IsSet()
}

// HasIsWip returns a boolean if a field has been set.
func (o *BlockTemplate) HasIsWip() bool {
	if o != nil && o.IsWip.IsSet() {
		return true
	}

	return false
}

// SetIsWip gets a reference to the given NullableString and assigns it to the IsWip field.
func (o *BlockTemplate) SetIsWip(v string) {
	o.IsWip.Set(&v)
}
// SetIsWipNil sets the value for IsWip to be an explicit nil
func (o *BlockTemplate) SetIsWipNil() {
	o.IsWip.Set(nil)
}

// UnsetIsWip ensures that no value is present for IsWip, not even an explicit nil
func (o *BlockTemplate) UnsetIsWip() {
	o.IsWip.Unset()
}

// GetIsDraft returns the IsDraft field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetIsDraft() string {
	if o == nil || IsNil(o.IsDraft.Get()) {
		var ret string
		return ret
	}
	return *o.IsDraft.Get()
}

// GetIsDraftOk returns a tuple with the IsDraft field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetIsDraftOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDraft.Get(), o.IsDraft.IsSet()
}

// HasIsDraft returns a boolean if a field has been set.
func (o *BlockTemplate) HasIsDraft() bool {
	if o != nil && o.IsDraft.IsSet() {
		return true
	}

	return false
}

// SetIsDraft gets a reference to the given NullableString and assigns it to the IsDraft field.
func (o *BlockTemplate) SetIsDraft(v string) {
	o.IsDraft.Set(&v)
}
// SetIsDraftNil sets the value for IsDraft to be an explicit nil
func (o *BlockTemplate) SetIsDraftNil() {
	o.IsDraft.Set(nil)
}

// UnsetIsDraft ensures that no value is present for IsDraft, not even an explicit nil
func (o *BlockTemplate) UnsetIsDraft() {
	o.IsDraft.Unset()
}

// GetEntityClass returns the EntityClass field value if set, zero value otherwise.
func (o *BlockTemplate) GetEntityClass() string {
	if o == nil || IsNil(o.EntityClass) {
		var ret string
		return ret
	}
	return *o.EntityClass
}

// GetEntityClassOk returns a tuple with the EntityClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetEntityClassOk() (*string, bool) {
	if o == nil || IsNil(o.EntityClass) {
		return nil, false
	}
	return o.EntityClass, true
}

// HasEntityClass returns a boolean if a field has been set.
func (o *BlockTemplate) HasEntityClass() bool {
	if o != nil && !IsNil(o.EntityClass) {
		return true
	}

	return false
}

// SetEntityClass gets a reference to the given string and assigns it to the EntityClass field.
func (o *BlockTemplate) SetEntityClass(v string) {
	o.EntityClass = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *BlockTemplate) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *BlockTemplate) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *BlockTemplate) SetIcon(v string) {
	o.Icon = &v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *BlockTemplate) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *BlockTemplate) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *BlockTemplate) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *BlockTemplate) UnsetUrl() {
	o.Url.Unset()
}

// GetSubscribergroups returns the Subscribergroups field value if set, zero value otherwise.
func (o *BlockTemplate) GetSubscribergroups() []string {
	if o == nil || IsNil(o.Subscribergroups) {
		var ret []string
		return ret
	}
	return o.Subscribergroups
}

// GetSubscribergroupsOk returns a tuple with the Subscribergroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetSubscribergroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subscribergroups) {
		return nil, false
	}
	return o.Subscribergroups, true
}

// HasSubscribergroups returns a boolean if a field has been set.
func (o *BlockTemplate) HasSubscribergroups() bool {
	if o != nil && !IsNil(o.Subscribergroups) {
		return true
	}

	return false
}

// SetSubscribergroups gets a reference to the given []string and assigns it to the Subscribergroups field.
func (o *BlockTemplate) SetSubscribergroups(v []string) {
	o.Subscribergroups = v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetFolderId() string {
	if o == nil || IsNil(o.FolderId.Get()) {
		var ret string
		return ret
	}
	return *o.FolderId.Get()
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FolderId.Get(), o.FolderId.IsSet()
}

// HasFolderId returns a boolean if a field has been set.
func (o *BlockTemplate) HasFolderId() bool {
	if o != nil && o.FolderId.IsSet() {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given NullableString and assigns it to the FolderId field.
func (o *BlockTemplate) SetFolderId(v string) {
	o.FolderId.Set(&v)
}
// SetFolderIdNil sets the value for FolderId to be an explicit nil
func (o *BlockTemplate) SetFolderIdNil() {
	o.FolderId.Set(nil)
}

// UnsetFolderId ensures that no value is present for FolderId, not even an explicit nil
func (o *BlockTemplate) UnsetFolderId() {
	o.FolderId.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetTags() string {
	if o == nil || IsNil(o.Tags.Get()) {
		var ret string
		return ret
	}
	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// HasTags returns a boolean if a field has been set.
func (o *BlockTemplate) HasTags() bool {
	if o != nil && o.Tags.IsSet() {
		return true
	}

	return false
}

// SetTags gets a reference to the given NullableString and assigns it to the Tags field.
func (o *BlockTemplate) SetTags(v string) {
	o.Tags.Set(&v)
}
// SetTagsNil sets the value for Tags to be an explicit nil
func (o *BlockTemplate) SetTagsNil() {
	o.Tags.Set(nil)
}

// UnsetTags ensures that no value is present for Tags, not even an explicit nil
func (o *BlockTemplate) UnsetTags() {
	o.Tags.Unset()
}

// GetUpdateDate returns the UpdateDate field value if set, zero value otherwise.
func (o *BlockTemplate) GetUpdateDate() Object {
	if o == nil || IsNil(o.UpdateDate) {
		var ret Object
		return ret
	}
	return *o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetUpdateDateOk() (*Object, bool) {
	if o == nil || IsNil(o.UpdateDate) {
		return nil, false
	}
	return o.UpdateDate, true
}

// HasUpdateDate returns a boolean if a field has been set.
func (o *BlockTemplate) HasUpdateDate() bool {
	if o != nil && !IsNil(o.UpdateDate) {
		return true
	}

	return false
}

// SetUpdateDate gets a reference to the given Object and assigns it to the UpdateDate field.
func (o *BlockTemplate) SetUpdateDate(v Object) {
	o.UpdateDate = &v
}

// GetIsEditable returns the IsEditable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetIsEditable() string {
	if o == nil || IsNil(o.IsEditable.Get()) {
		var ret string
		return ret
	}
	return *o.IsEditable.Get()
}

// GetIsEditableOk returns a tuple with the IsEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetIsEditableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsEditable.Get(), o.IsEditable.IsSet()
}

// HasIsEditable returns a boolean if a field has been set.
func (o *BlockTemplate) HasIsEditable() bool {
	if o != nil && o.IsEditable.IsSet() {
		return true
	}

	return false
}

// SetIsEditable gets a reference to the given NullableString and assigns it to the IsEditable field.
func (o *BlockTemplate) SetIsEditable(v string) {
	o.IsEditable.Set(&v)
}
// SetIsEditableNil sets the value for IsEditable to be an explicit nil
func (o *BlockTemplate) SetIsEditableNil() {
	o.IsEditable.Set(nil)
}

// UnsetIsEditable ensures that no value is present for IsEditable, not even an explicit nil
func (o *BlockTemplate) UnsetIsEditable() {
	o.IsEditable.Unset()
}

// GetSuccess returns the Success field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetSuccess() string {
	if o == nil || IsNil(o.Success.Get()) {
		var ret string
		return ret
	}
	return *o.Success.Get()
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetSuccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Success.Get(), o.Success.IsSet()
}

// HasSuccess returns a boolean if a field has been set.
func (o *BlockTemplate) HasSuccess() bool {
	if o != nil && o.Success.IsSet() {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given NullableString and assigns it to the Success field.
func (o *BlockTemplate) SetSuccess(v string) {
	o.Success.Set(&v)
}
// SetSuccessNil sets the value for Success to be an explicit nil
func (o *BlockTemplate) SetSuccessNil() {
	o.Success.Set(nil)
}

// UnsetSuccess ensures that no value is present for Success, not even an explicit nil
func (o *BlockTemplate) UnsetSuccess() {
	o.Success.Unset()
}

// GetListtitle returns the Listtitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetListtitle() string {
	if o == nil || IsNil(o.Listtitle.Get()) {
		var ret string
		return ret
	}
	return *o.Listtitle.Get()
}

// GetListtitleOk returns a tuple with the Listtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetListtitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Listtitle.Get(), o.Listtitle.IsSet()
}

// HasListtitle returns a boolean if a field has been set.
func (o *BlockTemplate) HasListtitle() bool {
	if o != nil && o.Listtitle.IsSet() {
		return true
	}

	return false
}

// SetListtitle gets a reference to the given NullableString and assigns it to the Listtitle field.
func (o *BlockTemplate) SetListtitle(v string) {
	o.Listtitle.Set(&v)
}
// SetListtitleNil sets the value for Listtitle to be an explicit nil
func (o *BlockTemplate) SetListtitleNil() {
	o.Listtitle.Set(nil)
}

// UnsetListtitle ensures that no value is present for Listtitle, not even an explicit nil
func (o *BlockTemplate) UnsetListtitle() {
	o.Listtitle.Unset()
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *BlockTemplate) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *BlockTemplate) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *BlockTemplate) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BlockTemplate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BlockTemplate) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BlockTemplate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BlockTemplate) UnsetDescription() {
	o.Description.Unset()
}

// GetArticleTemplate returns the ArticleTemplate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetArticleTemplate() string {
	if o == nil || IsNil(o.ArticleTemplate.Get()) {
		var ret string
		return ret
	}
	return *o.ArticleTemplate.Get()
}

// GetArticleTemplateOk returns a tuple with the ArticleTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetArticleTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArticleTemplate.Get(), o.ArticleTemplate.IsSet()
}

// HasArticleTemplate returns a boolean if a field has been set.
func (o *BlockTemplate) HasArticleTemplate() bool {
	if o != nil && o.ArticleTemplate.IsSet() {
		return true
	}

	return false
}

// SetArticleTemplate gets a reference to the given NullableString and assigns it to the ArticleTemplate field.
func (o *BlockTemplate) SetArticleTemplate(v string) {
	o.ArticleTemplate.Set(&v)
}
// SetArticleTemplateNil sets the value for ArticleTemplate to be an explicit nil
func (o *BlockTemplate) SetArticleTemplateNil() {
	o.ArticleTemplate.Set(nil)
}

// UnsetArticleTemplate ensures that no value is present for ArticleTemplate, not even an explicit nil
func (o *BlockTemplate) UnsetArticleTemplate() {
	o.ArticleTemplate.Unset()
}

// GetFormSchemaParser returns the FormSchemaParser field value if set, zero value otherwise.
func (o *BlockTemplate) GetFormSchemaParser() string {
	if o == nil || IsNil(o.FormSchemaParser) {
		var ret string
		return ret
	}
	return *o.FormSchemaParser
}

// GetFormSchemaParserOk returns a tuple with the FormSchemaParser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetFormSchemaParserOk() (*string, bool) {
	if o == nil || IsNil(o.FormSchemaParser) {
		return nil, false
	}
	return o.FormSchemaParser, true
}

// HasFormSchemaParser returns a boolean if a field has been set.
func (o *BlockTemplate) HasFormSchemaParser() bool {
	if o != nil && !IsNil(o.FormSchemaParser) {
		return true
	}

	return false
}

// SetFormSchemaParser gets a reference to the given string and assigns it to the FormSchemaParser field.
func (o *BlockTemplate) SetFormSchemaParser(v string) {
	o.FormSchemaParser = &v
}

// GetFormSchema returns the FormSchema field value if set, zero value otherwise.
func (o *BlockTemplate) GetFormSchema() string {
	if o == nil || IsNil(o.FormSchema) {
		var ret string
		return ret
	}
	return *o.FormSchema
}

// GetFormSchemaOk returns a tuple with the FormSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetFormSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.FormSchema) {
		return nil, false
	}
	return o.FormSchema, true
}

// HasFormSchema returns a boolean if a field has been set.
func (o *BlockTemplate) HasFormSchema() bool {
	if o != nil && !IsNil(o.FormSchema) {
		return true
	}

	return false
}

// SetFormSchema gets a reference to the given string and assigns it to the FormSchema field.
func (o *BlockTemplate) SetFormSchema(v string) {
	o.FormSchema = &v
}

// GetFormDisplayStructure returns the FormDisplayStructure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetFormDisplayStructure() string {
	if o == nil || IsNil(o.FormDisplayStructure.Get()) {
		var ret string
		return ret
	}
	return *o.FormDisplayStructure.Get()
}

// GetFormDisplayStructureOk returns a tuple with the FormDisplayStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetFormDisplayStructureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FormDisplayStructure.Get(), o.FormDisplayStructure.IsSet()
}

// HasFormDisplayStructure returns a boolean if a field has been set.
func (o *BlockTemplate) HasFormDisplayStructure() bool {
	if o != nil && o.FormDisplayStructure.IsSet() {
		return true
	}

	return false
}

// SetFormDisplayStructure gets a reference to the given NullableString and assigns it to the FormDisplayStructure field.
func (o *BlockTemplate) SetFormDisplayStructure(v string) {
	o.FormDisplayStructure.Set(&v)
}
// SetFormDisplayStructureNil sets the value for FormDisplayStructure to be an explicit nil
func (o *BlockTemplate) SetFormDisplayStructureNil() {
	o.FormDisplayStructure.Set(nil)
}

// UnsetFormDisplayStructure ensures that no value is present for FormDisplayStructure, not even an explicit nil
func (o *BlockTemplate) UnsetFormDisplayStructure() {
	o.FormDisplayStructure.Unset()
}

// GetDisplayStructure returns the DisplayStructure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetDisplayStructure() string {
	if o == nil || IsNil(o.DisplayStructure.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayStructure.Get()
}

// GetDisplayStructureOk returns a tuple with the DisplayStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetDisplayStructureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayStructure.Get(), o.DisplayStructure.IsSet()
}

// HasDisplayStructure returns a boolean if a field has been set.
func (o *BlockTemplate) HasDisplayStructure() bool {
	if o != nil && o.DisplayStructure.IsSet() {
		return true
	}

	return false
}

// SetDisplayStructure gets a reference to the given NullableString and assigns it to the DisplayStructure field.
func (o *BlockTemplate) SetDisplayStructure(v string) {
	o.DisplayStructure.Set(&v)
}
// SetDisplayStructureNil sets the value for DisplayStructure to be an explicit nil
func (o *BlockTemplate) SetDisplayStructureNil() {
	o.DisplayStructure.Set(nil)
}

// UnsetDisplayStructure ensures that no value is present for DisplayStructure, not even an explicit nil
func (o *BlockTemplate) UnsetDisplayStructure() {
	o.DisplayStructure.Unset()
}

// GetDisplayBadge returns the DisplayBadge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetDisplayBadge() string {
	if o == nil || IsNil(o.DisplayBadge.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayBadge.Get()
}

// GetDisplayBadgeOk returns a tuple with the DisplayBadge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetDisplayBadgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayBadge.Get(), o.DisplayBadge.IsSet()
}

// HasDisplayBadge returns a boolean if a field has been set.
func (o *BlockTemplate) HasDisplayBadge() bool {
	if o != nil && o.DisplayBadge.IsSet() {
		return true
	}

	return false
}

// SetDisplayBadge gets a reference to the given NullableString and assigns it to the DisplayBadge field.
func (o *BlockTemplate) SetDisplayBadge(v string) {
	o.DisplayBadge.Set(&v)
}
// SetDisplayBadgeNil sets the value for DisplayBadge to be an explicit nil
func (o *BlockTemplate) SetDisplayBadgeNil() {
	o.DisplayBadge.Set(nil)
}

// UnsetDisplayBadge ensures that no value is present for DisplayBadge, not even an explicit nil
func (o *BlockTemplate) UnsetDisplayBadge() {
	o.DisplayBadge.Unset()
}

// GetDisplayStyling returns the DisplayStyling field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetDisplayStyling() string {
	if o == nil || IsNil(o.DisplayStyling.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayStyling.Get()
}

// GetDisplayStylingOk returns a tuple with the DisplayStyling field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetDisplayStylingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayStyling.Get(), o.DisplayStyling.IsSet()
}

// HasDisplayStyling returns a boolean if a field has been set.
func (o *BlockTemplate) HasDisplayStyling() bool {
	if o != nil && o.DisplayStyling.IsSet() {
		return true
	}

	return false
}

// SetDisplayStyling gets a reference to the given NullableString and assigns it to the DisplayStyling field.
func (o *BlockTemplate) SetDisplayStyling(v string) {
	o.DisplayStyling.Set(&v)
}
// SetDisplayStylingNil sets the value for DisplayStyling to be an explicit nil
func (o *BlockTemplate) SetDisplayStylingNil() {
	o.DisplayStyling.Set(nil)
}

// UnsetDisplayStyling ensures that no value is present for DisplayStyling, not even an explicit nil
func (o *BlockTemplate) UnsetDisplayStyling() {
	o.DisplayStyling.Unset()
}

// GetDisplayScripting returns the DisplayScripting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetDisplayScripting() string {
	if o == nil || IsNil(o.DisplayScripting.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayScripting.Get()
}

// GetDisplayScriptingOk returns a tuple with the DisplayScripting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetDisplayScriptingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayScripting.Get(), o.DisplayScripting.IsSet()
}

// HasDisplayScripting returns a boolean if a field has been set.
func (o *BlockTemplate) HasDisplayScripting() bool {
	if o != nil && o.DisplayScripting.IsSet() {
		return true
	}

	return false
}

// SetDisplayScripting gets a reference to the given NullableString and assigns it to the DisplayScripting field.
func (o *BlockTemplate) SetDisplayScripting(v string) {
	o.DisplayScripting.Set(&v)
}
// SetDisplayScriptingNil sets the value for DisplayScripting to be an explicit nil
func (o *BlockTemplate) SetDisplayScriptingNil() {
	o.DisplayScripting.Set(nil)
}

// UnsetDisplayScripting ensures that no value is present for DisplayScripting, not even an explicit nil
func (o *BlockTemplate) UnsetDisplayScripting() {
	o.DisplayScripting.Unset()
}

// GetDisplayTrackable returns the DisplayTrackable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetDisplayTrackable() string {
	if o == nil || IsNil(o.DisplayTrackable.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayTrackable.Get()
}

// GetDisplayTrackableOk returns a tuple with the DisplayTrackable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetDisplayTrackableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayTrackable.Get(), o.DisplayTrackable.IsSet()
}

// HasDisplayTrackable returns a boolean if a field has been set.
func (o *BlockTemplate) HasDisplayTrackable() bool {
	if o != nil && o.DisplayTrackable.IsSet() {
		return true
	}

	return false
}

// SetDisplayTrackable gets a reference to the given NullableString and assigns it to the DisplayTrackable field.
func (o *BlockTemplate) SetDisplayTrackable(v string) {
	o.DisplayTrackable.Set(&v)
}
// SetDisplayTrackableNil sets the value for DisplayTrackable to be an explicit nil
func (o *BlockTemplate) SetDisplayTrackableNil() {
	o.DisplayTrackable.Set(nil)
}

// UnsetDisplayTrackable ensures that no value is present for DisplayTrackable, not even an explicit nil
func (o *BlockTemplate) UnsetDisplayTrackable() {
	o.DisplayTrackable.Unset()
}

// GetDisplayStylingRaw returns the DisplayStylingRaw field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockTemplate) GetDisplayStylingRaw() string {
	if o == nil || IsNil(o.DisplayStylingRaw.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayStylingRaw.Get()
}

// GetDisplayStylingRawOk returns a tuple with the DisplayStylingRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockTemplate) GetDisplayStylingRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayStylingRaw.Get(), o.DisplayStylingRaw.IsSet()
}

// HasDisplayStylingRaw returns a boolean if a field has been set.
func (o *BlockTemplate) HasDisplayStylingRaw() bool {
	if o != nil && o.DisplayStylingRaw.IsSet() {
		return true
	}

	return false
}

// SetDisplayStylingRaw gets a reference to the given NullableString and assigns it to the DisplayStylingRaw field.
func (o *BlockTemplate) SetDisplayStylingRaw(v string) {
	o.DisplayStylingRaw.Set(&v)
}
// SetDisplayStylingRawNil sets the value for DisplayStylingRaw to be an explicit nil
func (o *BlockTemplate) SetDisplayStylingRawNil() {
	o.DisplayStylingRaw.Set(nil)
}

// UnsetDisplayStylingRaw ensures that no value is present for DisplayStylingRaw, not even an explicit nil
func (o *BlockTemplate) UnsetDisplayStylingRaw() {
	o.DisplayStylingRaw.Unset()
}

// GetHasRawJson returns the HasRawJson field value if set, zero value otherwise.
func (o *BlockTemplate) GetHasRawJson() bool {
	if o == nil || IsNil(o.HasRawJson) {
		var ret bool
		return ret
	}
	return *o.HasRawJson
}

// GetHasRawJsonOk returns a tuple with the HasRawJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTemplate) GetHasRawJsonOk() (*bool, bool) {
	if o == nil || IsNil(o.HasRawJson) {
		return nil, false
	}
	return o.HasRawJson, true
}

// HasHasRawJson returns a boolean if a field has been set.
func (o *BlockTemplate) HasHasRawJson() bool {
	if o != nil && !IsNil(o.HasRawJson) {
		return true
	}

	return false
}

// SetHasRawJson gets a reference to the given bool and assigns it to the HasRawJson field.
func (o *BlockTemplate) SetHasRawJson(v bool) {
	o.HasRawJson = &v
}

func (o BlockTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if o.Slug.IsSet() {
		toSerialize["slug"] = o.Slug.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.IsWip.IsSet() {
		toSerialize["isWip"] = o.IsWip.Get()
	}
	if o.IsDraft.IsSet() {
		toSerialize["isDraft"] = o.IsDraft.Get()
	}
	if !IsNil(o.EntityClass) {
		toSerialize["entityClass"] = o.EntityClass
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if !IsNil(o.Subscribergroups) {
		toSerialize["subscribergroups"] = o.Subscribergroups
	}
	if o.FolderId.IsSet() {
		toSerialize["folderId"] = o.FolderId.Get()
	}
	if o.Tags.IsSet() {
		toSerialize["tags"] = o.Tags.Get()
	}
	if !IsNil(o.UpdateDate) {
		toSerialize["updateDate"] = o.UpdateDate
	}
	if o.IsEditable.IsSet() {
		toSerialize["isEditable"] = o.IsEditable.Get()
	}
	if o.Success.IsSet() {
		toSerialize["success"] = o.Success.Get()
	}
	if o.Listtitle.IsSet() {
		toSerialize["listtitle"] = o.Listtitle.Get()
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ArticleTemplate.IsSet() {
		toSerialize["articleTemplate"] = o.ArticleTemplate.Get()
	}
	if !IsNil(o.FormSchemaParser) {
		toSerialize["formSchemaParser"] = o.FormSchemaParser
	}
	if !IsNil(o.FormSchema) {
		toSerialize["formSchema"] = o.FormSchema
	}
	if o.FormDisplayStructure.IsSet() {
		toSerialize["formDisplayStructure"] = o.FormDisplayStructure.Get()
	}
	if o.DisplayStructure.IsSet() {
		toSerialize["displayStructure"] = o.DisplayStructure.Get()
	}
	if o.DisplayBadge.IsSet() {
		toSerialize["displayBadge"] = o.DisplayBadge.Get()
	}
	if o.DisplayStyling.IsSet() {
		toSerialize["displayStyling"] = o.DisplayStyling.Get()
	}
	if o.DisplayScripting.IsSet() {
		toSerialize["displayScripting"] = o.DisplayScripting.Get()
	}
	if o.DisplayTrackable.IsSet() {
		toSerialize["displayTrackable"] = o.DisplayTrackable.Get()
	}
	if o.DisplayStylingRaw.IsSet() {
		toSerialize["displayStylingRaw"] = o.DisplayStylingRaw.Get()
	}
	if !IsNil(o.HasRawJson) {
		toSerialize["hasRawJson"] = o.HasRawJson
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BlockTemplate) UnmarshalJSON(data []byte) (err error) {
	varBlockTemplate := _BlockTemplate{}

	err = json.Unmarshal(data, &varBlockTemplate)

	if err != nil {
		return err
	}

	*o = BlockTemplate(varBlockTemplate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "title")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "state")
		delete(additionalProperties, "isWip")
		delete(additionalProperties, "isDraft")
		delete(additionalProperties, "entityClass")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "url")
		delete(additionalProperties, "subscribergroups")
		delete(additionalProperties, "folderId")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "updateDate")
		delete(additionalProperties, "isEditable")
		delete(additionalProperties, "success")
		delete(additionalProperties, "listtitle")
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "description")
		delete(additionalProperties, "articleTemplate")
		delete(additionalProperties, "formSchemaParser")
		delete(additionalProperties, "formSchema")
		delete(additionalProperties, "formDisplayStructure")
		delete(additionalProperties, "displayStructure")
		delete(additionalProperties, "displayBadge")
		delete(additionalProperties, "displayStyling")
		delete(additionalProperties, "displayScripting")
		delete(additionalProperties, "displayTrackable")
		delete(additionalProperties, "displayStylingRaw")
		delete(additionalProperties, "hasRawJson")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBlockTemplate struct {
	value *BlockTemplate
	isSet bool
}

func (v NullableBlockTemplate) Get() *BlockTemplate {
	return v.value
}

func (v *NullableBlockTemplate) Set(val *BlockTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockTemplate(val *BlockTemplate) *NullableBlockTemplate {
	return &NullableBlockTemplate{value: val, isSet: true}
}

func (v NullableBlockTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


