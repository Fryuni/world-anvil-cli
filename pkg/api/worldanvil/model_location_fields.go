/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
)

// checks if the LocationFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationFields{}

// LocationFields All the fields available for the location template. Combine this with the generic article fields for a complete list of fields.
type LocationFields struct {
	Alternativename NullableString `json:"alternativename,omitempty"`
	Geography NullableString `json:"geography,omitempty"`
	Naturalresources NullableString `json:"naturalresources,omitempty"`
	Population NullableString `json:"population,omitempty"`
	AreaSize NullableString `json:"areaSize,omitempty"`
	Demographics NullableString `json:"demographics,omitempty"`
	Demonym NullableString `json:"demonym,omitempty"`
	Defences NullableString `json:"defences,omitempty"`
	Infrastructure NullableString `json:"infrastructure,omitempty"`
	Guilds NullableString `json:"guilds,omitempty"`
	History NullableString `json:"history,omitempty"`
	Tourism NullableString `json:"tourism,omitempty"`
	Industry NullableString `json:"industry,omitempty"`
	Architecture NullableString `json:"architecture,omitempty"`
	Government NullableString `json:"government,omitempty"`
	Assets NullableString `json:"assets,omitempty"`
	LocationTemplateType NullableString `json:"locationTemplateType,omitempty"`
	Constructed NullableString `json:"constructed,omitempty"`
	Ruined NullableString `json:"ruined,omitempty"`
	Florafauna NullableString `json:"florafauna,omitempty"`
	Ecosystem NullableString `json:"ecosystem,omitempty"`
	EcosystemCycles NullableString `json:"ecosystemCycles,omitempty"`
	LocalizedPhenomena NullableString `json:"localizedPhenomena,omitempty"`
	Climate NullableString `json:"climate,omitempty"`
	Alterations NullableString `json:"alterations,omitempty"`
	Purpose NullableString `json:"purpose,omitempty"`
	Design NullableString `json:"design,omitempty"`
	Entries NullableString `json:"entries,omitempty"`
	Denizens NullableString `json:"denizens,omitempty"`
	Valuables NullableString `json:"valuables,omitempty"`
	Hazards NullableString `json:"hazards,omitempty"`
	Effects NullableString `json:"effects,omitempty"`
	Sensory NullableString `json:"sensory,omitempty"`
	Properties NullableString `json:"properties,omitempty"`
	Contents NullableString `json:"contents,omitempty"`
	PointOfInterest NullableString `json:"pointOfInterest,omitempty"`
	District NullableString `json:"district,omitempty"`
	Parent *Object `json:"parent,omitempty"`
	Type *LocationType `json:"type,omitempty"`
	Person *Object `json:"person,omitempty"`
	Vehicle *Object `json:"vehicle,omitempty"`
	Rank *Object `json:"rank,omitempty"`
	Organization *Object `json:"organization,omitempty"`
	AdditionalRulers []Object `json:"additionalRulers,omitempty"`
	Contenders []Object `json:"contenders,omitempty"`
	ConnectedRooms []Object `json:"connectedRooms,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LocationFields LocationFields

// NewLocationFields instantiates a new LocationFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationFields() *LocationFields {
	this := LocationFields{}
	return &this
}

// NewLocationFieldsWithDefaults instantiates a new LocationFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationFieldsWithDefaults() *LocationFields {
	this := LocationFields{}
	return &this
}

// GetAlternativename returns the Alternativename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetAlternativename() string {
	if o == nil || IsNil(o.Alternativename.Get()) {
		var ret string
		return ret
	}
	return *o.Alternativename.Get()
}

// GetAlternativenameOk returns a tuple with the Alternativename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetAlternativenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alternativename.Get(), o.Alternativename.IsSet()
}

// HasAlternativename returns a boolean if a field has been set.
func (o *LocationFields) HasAlternativename() bool {
	if o != nil && o.Alternativename.IsSet() {
		return true
	}

	return false
}

// SetAlternativename gets a reference to the given NullableString and assigns it to the Alternativename field.
func (o *LocationFields) SetAlternativename(v string) {
	o.Alternativename.Set(&v)
}
// SetAlternativenameNil sets the value for Alternativename to be an explicit nil
func (o *LocationFields) SetAlternativenameNil() {
	o.Alternativename.Set(nil)
}

// UnsetAlternativename ensures that no value is present for Alternativename, not even an explicit nil
func (o *LocationFields) UnsetAlternativename() {
	o.Alternativename.Unset()
}

// GetGeography returns the Geography field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetGeography() string {
	if o == nil || IsNil(o.Geography.Get()) {
		var ret string
		return ret
	}
	return *o.Geography.Get()
}

// GetGeographyOk returns a tuple with the Geography field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetGeographyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Geography.Get(), o.Geography.IsSet()
}

// HasGeography returns a boolean if a field has been set.
func (o *LocationFields) HasGeography() bool {
	if o != nil && o.Geography.IsSet() {
		return true
	}

	return false
}

// SetGeography gets a reference to the given NullableString and assigns it to the Geography field.
func (o *LocationFields) SetGeography(v string) {
	o.Geography.Set(&v)
}
// SetGeographyNil sets the value for Geography to be an explicit nil
func (o *LocationFields) SetGeographyNil() {
	o.Geography.Set(nil)
}

// UnsetGeography ensures that no value is present for Geography, not even an explicit nil
func (o *LocationFields) UnsetGeography() {
	o.Geography.Unset()
}

// GetNaturalresources returns the Naturalresources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetNaturalresources() string {
	if o == nil || IsNil(o.Naturalresources.Get()) {
		var ret string
		return ret
	}
	return *o.Naturalresources.Get()
}

// GetNaturalresourcesOk returns a tuple with the Naturalresources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetNaturalresourcesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Naturalresources.Get(), o.Naturalresources.IsSet()
}

// HasNaturalresources returns a boolean if a field has been set.
func (o *LocationFields) HasNaturalresources() bool {
	if o != nil && o.Naturalresources.IsSet() {
		return true
	}

	return false
}

// SetNaturalresources gets a reference to the given NullableString and assigns it to the Naturalresources field.
func (o *LocationFields) SetNaturalresources(v string) {
	o.Naturalresources.Set(&v)
}
// SetNaturalresourcesNil sets the value for Naturalresources to be an explicit nil
func (o *LocationFields) SetNaturalresourcesNil() {
	o.Naturalresources.Set(nil)
}

// UnsetNaturalresources ensures that no value is present for Naturalresources, not even an explicit nil
func (o *LocationFields) UnsetNaturalresources() {
	o.Naturalresources.Unset()
}

// GetPopulation returns the Population field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetPopulation() string {
	if o == nil || IsNil(o.Population.Get()) {
		var ret string
		return ret
	}
	return *o.Population.Get()
}

// GetPopulationOk returns a tuple with the Population field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetPopulationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Population.Get(), o.Population.IsSet()
}

// HasPopulation returns a boolean if a field has been set.
func (o *LocationFields) HasPopulation() bool {
	if o != nil && o.Population.IsSet() {
		return true
	}

	return false
}

// SetPopulation gets a reference to the given NullableString and assigns it to the Population field.
func (o *LocationFields) SetPopulation(v string) {
	o.Population.Set(&v)
}
// SetPopulationNil sets the value for Population to be an explicit nil
func (o *LocationFields) SetPopulationNil() {
	o.Population.Set(nil)
}

// UnsetPopulation ensures that no value is present for Population, not even an explicit nil
func (o *LocationFields) UnsetPopulation() {
	o.Population.Unset()
}

// GetAreaSize returns the AreaSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetAreaSize() string {
	if o == nil || IsNil(o.AreaSize.Get()) {
		var ret string
		return ret
	}
	return *o.AreaSize.Get()
}

// GetAreaSizeOk returns a tuple with the AreaSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetAreaSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AreaSize.Get(), o.AreaSize.IsSet()
}

// HasAreaSize returns a boolean if a field has been set.
func (o *LocationFields) HasAreaSize() bool {
	if o != nil && o.AreaSize.IsSet() {
		return true
	}

	return false
}

// SetAreaSize gets a reference to the given NullableString and assigns it to the AreaSize field.
func (o *LocationFields) SetAreaSize(v string) {
	o.AreaSize.Set(&v)
}
// SetAreaSizeNil sets the value for AreaSize to be an explicit nil
func (o *LocationFields) SetAreaSizeNil() {
	o.AreaSize.Set(nil)
}

// UnsetAreaSize ensures that no value is present for AreaSize, not even an explicit nil
func (o *LocationFields) UnsetAreaSize() {
	o.AreaSize.Unset()
}

// GetDemographics returns the Demographics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetDemographics() string {
	if o == nil || IsNil(o.Demographics.Get()) {
		var ret string
		return ret
	}
	return *o.Demographics.Get()
}

// GetDemographicsOk returns a tuple with the Demographics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetDemographicsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Demographics.Get(), o.Demographics.IsSet()
}

// HasDemographics returns a boolean if a field has been set.
func (o *LocationFields) HasDemographics() bool {
	if o != nil && o.Demographics.IsSet() {
		return true
	}

	return false
}

// SetDemographics gets a reference to the given NullableString and assigns it to the Demographics field.
func (o *LocationFields) SetDemographics(v string) {
	o.Demographics.Set(&v)
}
// SetDemographicsNil sets the value for Demographics to be an explicit nil
func (o *LocationFields) SetDemographicsNil() {
	o.Demographics.Set(nil)
}

// UnsetDemographics ensures that no value is present for Demographics, not even an explicit nil
func (o *LocationFields) UnsetDemographics() {
	o.Demographics.Unset()
}

// GetDemonym returns the Demonym field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetDemonym() string {
	if o == nil || IsNil(o.Demonym.Get()) {
		var ret string
		return ret
	}
	return *o.Demonym.Get()
}

// GetDemonymOk returns a tuple with the Demonym field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetDemonymOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Demonym.Get(), o.Demonym.IsSet()
}

// HasDemonym returns a boolean if a field has been set.
func (o *LocationFields) HasDemonym() bool {
	if o != nil && o.Demonym.IsSet() {
		return true
	}

	return false
}

// SetDemonym gets a reference to the given NullableString and assigns it to the Demonym field.
func (o *LocationFields) SetDemonym(v string) {
	o.Demonym.Set(&v)
}
// SetDemonymNil sets the value for Demonym to be an explicit nil
func (o *LocationFields) SetDemonymNil() {
	o.Demonym.Set(nil)
}

// UnsetDemonym ensures that no value is present for Demonym, not even an explicit nil
func (o *LocationFields) UnsetDemonym() {
	o.Demonym.Unset()
}

// GetDefences returns the Defences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetDefences() string {
	if o == nil || IsNil(o.Defences.Get()) {
		var ret string
		return ret
	}
	return *o.Defences.Get()
}

// GetDefencesOk returns a tuple with the Defences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetDefencesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Defences.Get(), o.Defences.IsSet()
}

// HasDefences returns a boolean if a field has been set.
func (o *LocationFields) HasDefences() bool {
	if o != nil && o.Defences.IsSet() {
		return true
	}

	return false
}

// SetDefences gets a reference to the given NullableString and assigns it to the Defences field.
func (o *LocationFields) SetDefences(v string) {
	o.Defences.Set(&v)
}
// SetDefencesNil sets the value for Defences to be an explicit nil
func (o *LocationFields) SetDefencesNil() {
	o.Defences.Set(nil)
}

// UnsetDefences ensures that no value is present for Defences, not even an explicit nil
func (o *LocationFields) UnsetDefences() {
	o.Defences.Unset()
}

// GetInfrastructure returns the Infrastructure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetInfrastructure() string {
	if o == nil || IsNil(o.Infrastructure.Get()) {
		var ret string
		return ret
	}
	return *o.Infrastructure.Get()
}

// GetInfrastructureOk returns a tuple with the Infrastructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetInfrastructureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Infrastructure.Get(), o.Infrastructure.IsSet()
}

// HasInfrastructure returns a boolean if a field has been set.
func (o *LocationFields) HasInfrastructure() bool {
	if o != nil && o.Infrastructure.IsSet() {
		return true
	}

	return false
}

// SetInfrastructure gets a reference to the given NullableString and assigns it to the Infrastructure field.
func (o *LocationFields) SetInfrastructure(v string) {
	o.Infrastructure.Set(&v)
}
// SetInfrastructureNil sets the value for Infrastructure to be an explicit nil
func (o *LocationFields) SetInfrastructureNil() {
	o.Infrastructure.Set(nil)
}

// UnsetInfrastructure ensures that no value is present for Infrastructure, not even an explicit nil
func (o *LocationFields) UnsetInfrastructure() {
	o.Infrastructure.Unset()
}

// GetGuilds returns the Guilds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetGuilds() string {
	if o == nil || IsNil(o.Guilds.Get()) {
		var ret string
		return ret
	}
	return *o.Guilds.Get()
}

// GetGuildsOk returns a tuple with the Guilds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetGuildsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Guilds.Get(), o.Guilds.IsSet()
}

// HasGuilds returns a boolean if a field has been set.
func (o *LocationFields) HasGuilds() bool {
	if o != nil && o.Guilds.IsSet() {
		return true
	}

	return false
}

// SetGuilds gets a reference to the given NullableString and assigns it to the Guilds field.
func (o *LocationFields) SetGuilds(v string) {
	o.Guilds.Set(&v)
}
// SetGuildsNil sets the value for Guilds to be an explicit nil
func (o *LocationFields) SetGuildsNil() {
	o.Guilds.Set(nil)
}

// UnsetGuilds ensures that no value is present for Guilds, not even an explicit nil
func (o *LocationFields) UnsetGuilds() {
	o.Guilds.Unset()
}

// GetHistory returns the History field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetHistory() string {
	if o == nil || IsNil(o.History.Get()) {
		var ret string
		return ret
	}
	return *o.History.Get()
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetHistoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.History.Get(), o.History.IsSet()
}

// HasHistory returns a boolean if a field has been set.
func (o *LocationFields) HasHistory() bool {
	if o != nil && o.History.IsSet() {
		return true
	}

	return false
}

// SetHistory gets a reference to the given NullableString and assigns it to the History field.
func (o *LocationFields) SetHistory(v string) {
	o.History.Set(&v)
}
// SetHistoryNil sets the value for History to be an explicit nil
func (o *LocationFields) SetHistoryNil() {
	o.History.Set(nil)
}

// UnsetHistory ensures that no value is present for History, not even an explicit nil
func (o *LocationFields) UnsetHistory() {
	o.History.Unset()
}

// GetTourism returns the Tourism field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetTourism() string {
	if o == nil || IsNil(o.Tourism.Get()) {
		var ret string
		return ret
	}
	return *o.Tourism.Get()
}

// GetTourismOk returns a tuple with the Tourism field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetTourismOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tourism.Get(), o.Tourism.IsSet()
}

// HasTourism returns a boolean if a field has been set.
func (o *LocationFields) HasTourism() bool {
	if o != nil && o.Tourism.IsSet() {
		return true
	}

	return false
}

// SetTourism gets a reference to the given NullableString and assigns it to the Tourism field.
func (o *LocationFields) SetTourism(v string) {
	o.Tourism.Set(&v)
}
// SetTourismNil sets the value for Tourism to be an explicit nil
func (o *LocationFields) SetTourismNil() {
	o.Tourism.Set(nil)
}

// UnsetTourism ensures that no value is present for Tourism, not even an explicit nil
func (o *LocationFields) UnsetTourism() {
	o.Tourism.Unset()
}

// GetIndustry returns the Industry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetIndustry() string {
	if o == nil || IsNil(o.Industry.Get()) {
		var ret string
		return ret
	}
	return *o.Industry.Get()
}

// GetIndustryOk returns a tuple with the Industry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetIndustryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Industry.Get(), o.Industry.IsSet()
}

// HasIndustry returns a boolean if a field has been set.
func (o *LocationFields) HasIndustry() bool {
	if o != nil && o.Industry.IsSet() {
		return true
	}

	return false
}

// SetIndustry gets a reference to the given NullableString and assigns it to the Industry field.
func (o *LocationFields) SetIndustry(v string) {
	o.Industry.Set(&v)
}
// SetIndustryNil sets the value for Industry to be an explicit nil
func (o *LocationFields) SetIndustryNil() {
	o.Industry.Set(nil)
}

// UnsetIndustry ensures that no value is present for Industry, not even an explicit nil
func (o *LocationFields) UnsetIndustry() {
	o.Industry.Unset()
}

// GetArchitecture returns the Architecture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetArchitecture() string {
	if o == nil || IsNil(o.Architecture.Get()) {
		var ret string
		return ret
	}
	return *o.Architecture.Get()
}

// GetArchitectureOk returns a tuple with the Architecture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Architecture.Get(), o.Architecture.IsSet()
}

// HasArchitecture returns a boolean if a field has been set.
func (o *LocationFields) HasArchitecture() bool {
	if o != nil && o.Architecture.IsSet() {
		return true
	}

	return false
}

// SetArchitecture gets a reference to the given NullableString and assigns it to the Architecture field.
func (o *LocationFields) SetArchitecture(v string) {
	o.Architecture.Set(&v)
}
// SetArchitectureNil sets the value for Architecture to be an explicit nil
func (o *LocationFields) SetArchitectureNil() {
	o.Architecture.Set(nil)
}

// UnsetArchitecture ensures that no value is present for Architecture, not even an explicit nil
func (o *LocationFields) UnsetArchitecture() {
	o.Architecture.Unset()
}

// GetGovernment returns the Government field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetGovernment() string {
	if o == nil || IsNil(o.Government.Get()) {
		var ret string
		return ret
	}
	return *o.Government.Get()
}

// GetGovernmentOk returns a tuple with the Government field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetGovernmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Government.Get(), o.Government.IsSet()
}

// HasGovernment returns a boolean if a field has been set.
func (o *LocationFields) HasGovernment() bool {
	if o != nil && o.Government.IsSet() {
		return true
	}

	return false
}

// SetGovernment gets a reference to the given NullableString and assigns it to the Government field.
func (o *LocationFields) SetGovernment(v string) {
	o.Government.Set(&v)
}
// SetGovernmentNil sets the value for Government to be an explicit nil
func (o *LocationFields) SetGovernmentNil() {
	o.Government.Set(nil)
}

// UnsetGovernment ensures that no value is present for Government, not even an explicit nil
func (o *LocationFields) UnsetGovernment() {
	o.Government.Unset()
}

// GetAssets returns the Assets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetAssets() string {
	if o == nil || IsNil(o.Assets.Get()) {
		var ret string
		return ret
	}
	return *o.Assets.Get()
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetAssetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assets.Get(), o.Assets.IsSet()
}

// HasAssets returns a boolean if a field has been set.
func (o *LocationFields) HasAssets() bool {
	if o != nil && o.Assets.IsSet() {
		return true
	}

	return false
}

// SetAssets gets a reference to the given NullableString and assigns it to the Assets field.
func (o *LocationFields) SetAssets(v string) {
	o.Assets.Set(&v)
}
// SetAssetsNil sets the value for Assets to be an explicit nil
func (o *LocationFields) SetAssetsNil() {
	o.Assets.Set(nil)
}

// UnsetAssets ensures that no value is present for Assets, not even an explicit nil
func (o *LocationFields) UnsetAssets() {
	o.Assets.Unset()
}

// GetLocationTemplateType returns the LocationTemplateType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetLocationTemplateType() string {
	if o == nil || IsNil(o.LocationTemplateType.Get()) {
		var ret string
		return ret
	}
	return *o.LocationTemplateType.Get()
}

// GetLocationTemplateTypeOk returns a tuple with the LocationTemplateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetLocationTemplateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationTemplateType.Get(), o.LocationTemplateType.IsSet()
}

// HasLocationTemplateType returns a boolean if a field has been set.
func (o *LocationFields) HasLocationTemplateType() bool {
	if o != nil && o.LocationTemplateType.IsSet() {
		return true
	}

	return false
}

// SetLocationTemplateType gets a reference to the given NullableString and assigns it to the LocationTemplateType field.
func (o *LocationFields) SetLocationTemplateType(v string) {
	o.LocationTemplateType.Set(&v)
}
// SetLocationTemplateTypeNil sets the value for LocationTemplateType to be an explicit nil
func (o *LocationFields) SetLocationTemplateTypeNil() {
	o.LocationTemplateType.Set(nil)
}

// UnsetLocationTemplateType ensures that no value is present for LocationTemplateType, not even an explicit nil
func (o *LocationFields) UnsetLocationTemplateType() {
	o.LocationTemplateType.Unset()
}

// GetConstructed returns the Constructed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetConstructed() string {
	if o == nil || IsNil(o.Constructed.Get()) {
		var ret string
		return ret
	}
	return *o.Constructed.Get()
}

// GetConstructedOk returns a tuple with the Constructed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetConstructedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Constructed.Get(), o.Constructed.IsSet()
}

// HasConstructed returns a boolean if a field has been set.
func (o *LocationFields) HasConstructed() bool {
	if o != nil && o.Constructed.IsSet() {
		return true
	}

	return false
}

// SetConstructed gets a reference to the given NullableString and assigns it to the Constructed field.
func (o *LocationFields) SetConstructed(v string) {
	o.Constructed.Set(&v)
}
// SetConstructedNil sets the value for Constructed to be an explicit nil
func (o *LocationFields) SetConstructedNil() {
	o.Constructed.Set(nil)
}

// UnsetConstructed ensures that no value is present for Constructed, not even an explicit nil
func (o *LocationFields) UnsetConstructed() {
	o.Constructed.Unset()
}

// GetRuined returns the Ruined field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetRuined() string {
	if o == nil || IsNil(o.Ruined.Get()) {
		var ret string
		return ret
	}
	return *o.Ruined.Get()
}

// GetRuinedOk returns a tuple with the Ruined field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetRuinedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ruined.Get(), o.Ruined.IsSet()
}

// HasRuined returns a boolean if a field has been set.
func (o *LocationFields) HasRuined() bool {
	if o != nil && o.Ruined.IsSet() {
		return true
	}

	return false
}

// SetRuined gets a reference to the given NullableString and assigns it to the Ruined field.
func (o *LocationFields) SetRuined(v string) {
	o.Ruined.Set(&v)
}
// SetRuinedNil sets the value for Ruined to be an explicit nil
func (o *LocationFields) SetRuinedNil() {
	o.Ruined.Set(nil)
}

// UnsetRuined ensures that no value is present for Ruined, not even an explicit nil
func (o *LocationFields) UnsetRuined() {
	o.Ruined.Unset()
}

// GetFlorafauna returns the Florafauna field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetFlorafauna() string {
	if o == nil || IsNil(o.Florafauna.Get()) {
		var ret string
		return ret
	}
	return *o.Florafauna.Get()
}

// GetFlorafaunaOk returns a tuple with the Florafauna field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetFlorafaunaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Florafauna.Get(), o.Florafauna.IsSet()
}

// HasFlorafauna returns a boolean if a field has been set.
func (o *LocationFields) HasFlorafauna() bool {
	if o != nil && o.Florafauna.IsSet() {
		return true
	}

	return false
}

// SetFlorafauna gets a reference to the given NullableString and assigns it to the Florafauna field.
func (o *LocationFields) SetFlorafauna(v string) {
	o.Florafauna.Set(&v)
}
// SetFlorafaunaNil sets the value for Florafauna to be an explicit nil
func (o *LocationFields) SetFlorafaunaNil() {
	o.Florafauna.Set(nil)
}

// UnsetFlorafauna ensures that no value is present for Florafauna, not even an explicit nil
func (o *LocationFields) UnsetFlorafauna() {
	o.Florafauna.Unset()
}

// GetEcosystem returns the Ecosystem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetEcosystem() string {
	if o == nil || IsNil(o.Ecosystem.Get()) {
		var ret string
		return ret
	}
	return *o.Ecosystem.Get()
}

// GetEcosystemOk returns a tuple with the Ecosystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetEcosystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ecosystem.Get(), o.Ecosystem.IsSet()
}

// HasEcosystem returns a boolean if a field has been set.
func (o *LocationFields) HasEcosystem() bool {
	if o != nil && o.Ecosystem.IsSet() {
		return true
	}

	return false
}

// SetEcosystem gets a reference to the given NullableString and assigns it to the Ecosystem field.
func (o *LocationFields) SetEcosystem(v string) {
	o.Ecosystem.Set(&v)
}
// SetEcosystemNil sets the value for Ecosystem to be an explicit nil
func (o *LocationFields) SetEcosystemNil() {
	o.Ecosystem.Set(nil)
}

// UnsetEcosystem ensures that no value is present for Ecosystem, not even an explicit nil
func (o *LocationFields) UnsetEcosystem() {
	o.Ecosystem.Unset()
}

// GetEcosystemCycles returns the EcosystemCycles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetEcosystemCycles() string {
	if o == nil || IsNil(o.EcosystemCycles.Get()) {
		var ret string
		return ret
	}
	return *o.EcosystemCycles.Get()
}

// GetEcosystemCyclesOk returns a tuple with the EcosystemCycles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetEcosystemCyclesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EcosystemCycles.Get(), o.EcosystemCycles.IsSet()
}

// HasEcosystemCycles returns a boolean if a field has been set.
func (o *LocationFields) HasEcosystemCycles() bool {
	if o != nil && o.EcosystemCycles.IsSet() {
		return true
	}

	return false
}

// SetEcosystemCycles gets a reference to the given NullableString and assigns it to the EcosystemCycles field.
func (o *LocationFields) SetEcosystemCycles(v string) {
	o.EcosystemCycles.Set(&v)
}
// SetEcosystemCyclesNil sets the value for EcosystemCycles to be an explicit nil
func (o *LocationFields) SetEcosystemCyclesNil() {
	o.EcosystemCycles.Set(nil)
}

// UnsetEcosystemCycles ensures that no value is present for EcosystemCycles, not even an explicit nil
func (o *LocationFields) UnsetEcosystemCycles() {
	o.EcosystemCycles.Unset()
}

// GetLocalizedPhenomena returns the LocalizedPhenomena field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetLocalizedPhenomena() string {
	if o == nil || IsNil(o.LocalizedPhenomena.Get()) {
		var ret string
		return ret
	}
	return *o.LocalizedPhenomena.Get()
}

// GetLocalizedPhenomenaOk returns a tuple with the LocalizedPhenomena field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetLocalizedPhenomenaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalizedPhenomena.Get(), o.LocalizedPhenomena.IsSet()
}

// HasLocalizedPhenomena returns a boolean if a field has been set.
func (o *LocationFields) HasLocalizedPhenomena() bool {
	if o != nil && o.LocalizedPhenomena.IsSet() {
		return true
	}

	return false
}

// SetLocalizedPhenomena gets a reference to the given NullableString and assigns it to the LocalizedPhenomena field.
func (o *LocationFields) SetLocalizedPhenomena(v string) {
	o.LocalizedPhenomena.Set(&v)
}
// SetLocalizedPhenomenaNil sets the value for LocalizedPhenomena to be an explicit nil
func (o *LocationFields) SetLocalizedPhenomenaNil() {
	o.LocalizedPhenomena.Set(nil)
}

// UnsetLocalizedPhenomena ensures that no value is present for LocalizedPhenomena, not even an explicit nil
func (o *LocationFields) UnsetLocalizedPhenomena() {
	o.LocalizedPhenomena.Unset()
}

// GetClimate returns the Climate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetClimate() string {
	if o == nil || IsNil(o.Climate.Get()) {
		var ret string
		return ret
	}
	return *o.Climate.Get()
}

// GetClimateOk returns a tuple with the Climate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetClimateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Climate.Get(), o.Climate.IsSet()
}

// HasClimate returns a boolean if a field has been set.
func (o *LocationFields) HasClimate() bool {
	if o != nil && o.Climate.IsSet() {
		return true
	}

	return false
}

// SetClimate gets a reference to the given NullableString and assigns it to the Climate field.
func (o *LocationFields) SetClimate(v string) {
	o.Climate.Set(&v)
}
// SetClimateNil sets the value for Climate to be an explicit nil
func (o *LocationFields) SetClimateNil() {
	o.Climate.Set(nil)
}

// UnsetClimate ensures that no value is present for Climate, not even an explicit nil
func (o *LocationFields) UnsetClimate() {
	o.Climate.Unset()
}

// GetAlterations returns the Alterations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetAlterations() string {
	if o == nil || IsNil(o.Alterations.Get()) {
		var ret string
		return ret
	}
	return *o.Alterations.Get()
}

// GetAlterationsOk returns a tuple with the Alterations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetAlterationsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alterations.Get(), o.Alterations.IsSet()
}

// HasAlterations returns a boolean if a field has been set.
func (o *LocationFields) HasAlterations() bool {
	if o != nil && o.Alterations.IsSet() {
		return true
	}

	return false
}

// SetAlterations gets a reference to the given NullableString and assigns it to the Alterations field.
func (o *LocationFields) SetAlterations(v string) {
	o.Alterations.Set(&v)
}
// SetAlterationsNil sets the value for Alterations to be an explicit nil
func (o *LocationFields) SetAlterationsNil() {
	o.Alterations.Set(nil)
}

// UnsetAlterations ensures that no value is present for Alterations, not even an explicit nil
func (o *LocationFields) UnsetAlterations() {
	o.Alterations.Unset()
}

// GetPurpose returns the Purpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetPurpose() string {
	if o == nil || IsNil(o.Purpose.Get()) {
		var ret string
		return ret
	}
	return *o.Purpose.Get()
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Purpose.Get(), o.Purpose.IsSet()
}

// HasPurpose returns a boolean if a field has been set.
func (o *LocationFields) HasPurpose() bool {
	if o != nil && o.Purpose.IsSet() {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given NullableString and assigns it to the Purpose field.
func (o *LocationFields) SetPurpose(v string) {
	o.Purpose.Set(&v)
}
// SetPurposeNil sets the value for Purpose to be an explicit nil
func (o *LocationFields) SetPurposeNil() {
	o.Purpose.Set(nil)
}

// UnsetPurpose ensures that no value is present for Purpose, not even an explicit nil
func (o *LocationFields) UnsetPurpose() {
	o.Purpose.Unset()
}

// GetDesign returns the Design field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetDesign() string {
	if o == nil || IsNil(o.Design.Get()) {
		var ret string
		return ret
	}
	return *o.Design.Get()
}

// GetDesignOk returns a tuple with the Design field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetDesignOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Design.Get(), o.Design.IsSet()
}

// HasDesign returns a boolean if a field has been set.
func (o *LocationFields) HasDesign() bool {
	if o != nil && o.Design.IsSet() {
		return true
	}

	return false
}

// SetDesign gets a reference to the given NullableString and assigns it to the Design field.
func (o *LocationFields) SetDesign(v string) {
	o.Design.Set(&v)
}
// SetDesignNil sets the value for Design to be an explicit nil
func (o *LocationFields) SetDesignNil() {
	o.Design.Set(nil)
}

// UnsetDesign ensures that no value is present for Design, not even an explicit nil
func (o *LocationFields) UnsetDesign() {
	o.Design.Unset()
}

// GetEntries returns the Entries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetEntries() string {
	if o == nil || IsNil(o.Entries.Get()) {
		var ret string
		return ret
	}
	return *o.Entries.Get()
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetEntriesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entries.Get(), o.Entries.IsSet()
}

// HasEntries returns a boolean if a field has been set.
func (o *LocationFields) HasEntries() bool {
	if o != nil && o.Entries.IsSet() {
		return true
	}

	return false
}

// SetEntries gets a reference to the given NullableString and assigns it to the Entries field.
func (o *LocationFields) SetEntries(v string) {
	o.Entries.Set(&v)
}
// SetEntriesNil sets the value for Entries to be an explicit nil
func (o *LocationFields) SetEntriesNil() {
	o.Entries.Set(nil)
}

// UnsetEntries ensures that no value is present for Entries, not even an explicit nil
func (o *LocationFields) UnsetEntries() {
	o.Entries.Unset()
}

// GetDenizens returns the Denizens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetDenizens() string {
	if o == nil || IsNil(o.Denizens.Get()) {
		var ret string
		return ret
	}
	return *o.Denizens.Get()
}

// GetDenizensOk returns a tuple with the Denizens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetDenizensOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Denizens.Get(), o.Denizens.IsSet()
}

// HasDenizens returns a boolean if a field has been set.
func (o *LocationFields) HasDenizens() bool {
	if o != nil && o.Denizens.IsSet() {
		return true
	}

	return false
}

// SetDenizens gets a reference to the given NullableString and assigns it to the Denizens field.
func (o *LocationFields) SetDenizens(v string) {
	o.Denizens.Set(&v)
}
// SetDenizensNil sets the value for Denizens to be an explicit nil
func (o *LocationFields) SetDenizensNil() {
	o.Denizens.Set(nil)
}

// UnsetDenizens ensures that no value is present for Denizens, not even an explicit nil
func (o *LocationFields) UnsetDenizens() {
	o.Denizens.Unset()
}

// GetValuables returns the Valuables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetValuables() string {
	if o == nil || IsNil(o.Valuables.Get()) {
		var ret string
		return ret
	}
	return *o.Valuables.Get()
}

// GetValuablesOk returns a tuple with the Valuables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetValuablesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Valuables.Get(), o.Valuables.IsSet()
}

// HasValuables returns a boolean if a field has been set.
func (o *LocationFields) HasValuables() bool {
	if o != nil && o.Valuables.IsSet() {
		return true
	}

	return false
}

// SetValuables gets a reference to the given NullableString and assigns it to the Valuables field.
func (o *LocationFields) SetValuables(v string) {
	o.Valuables.Set(&v)
}
// SetValuablesNil sets the value for Valuables to be an explicit nil
func (o *LocationFields) SetValuablesNil() {
	o.Valuables.Set(nil)
}

// UnsetValuables ensures that no value is present for Valuables, not even an explicit nil
func (o *LocationFields) UnsetValuables() {
	o.Valuables.Unset()
}

// GetHazards returns the Hazards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetHazards() string {
	if o == nil || IsNil(o.Hazards.Get()) {
		var ret string
		return ret
	}
	return *o.Hazards.Get()
}

// GetHazardsOk returns a tuple with the Hazards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetHazardsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hazards.Get(), o.Hazards.IsSet()
}

// HasHazards returns a boolean if a field has been set.
func (o *LocationFields) HasHazards() bool {
	if o != nil && o.Hazards.IsSet() {
		return true
	}

	return false
}

// SetHazards gets a reference to the given NullableString and assigns it to the Hazards field.
func (o *LocationFields) SetHazards(v string) {
	o.Hazards.Set(&v)
}
// SetHazardsNil sets the value for Hazards to be an explicit nil
func (o *LocationFields) SetHazardsNil() {
	o.Hazards.Set(nil)
}

// UnsetHazards ensures that no value is present for Hazards, not even an explicit nil
func (o *LocationFields) UnsetHazards() {
	o.Hazards.Unset()
}

// GetEffects returns the Effects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetEffects() string {
	if o == nil || IsNil(o.Effects.Get()) {
		var ret string
		return ret
	}
	return *o.Effects.Get()
}

// GetEffectsOk returns a tuple with the Effects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetEffectsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Effects.Get(), o.Effects.IsSet()
}

// HasEffects returns a boolean if a field has been set.
func (o *LocationFields) HasEffects() bool {
	if o != nil && o.Effects.IsSet() {
		return true
	}

	return false
}

// SetEffects gets a reference to the given NullableString and assigns it to the Effects field.
func (o *LocationFields) SetEffects(v string) {
	o.Effects.Set(&v)
}
// SetEffectsNil sets the value for Effects to be an explicit nil
func (o *LocationFields) SetEffectsNil() {
	o.Effects.Set(nil)
}

// UnsetEffects ensures that no value is present for Effects, not even an explicit nil
func (o *LocationFields) UnsetEffects() {
	o.Effects.Unset()
}

// GetSensory returns the Sensory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetSensory() string {
	if o == nil || IsNil(o.Sensory.Get()) {
		var ret string
		return ret
	}
	return *o.Sensory.Get()
}

// GetSensoryOk returns a tuple with the Sensory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetSensoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sensory.Get(), o.Sensory.IsSet()
}

// HasSensory returns a boolean if a field has been set.
func (o *LocationFields) HasSensory() bool {
	if o != nil && o.Sensory.IsSet() {
		return true
	}

	return false
}

// SetSensory gets a reference to the given NullableString and assigns it to the Sensory field.
func (o *LocationFields) SetSensory(v string) {
	o.Sensory.Set(&v)
}
// SetSensoryNil sets the value for Sensory to be an explicit nil
func (o *LocationFields) SetSensoryNil() {
	o.Sensory.Set(nil)
}

// UnsetSensory ensures that no value is present for Sensory, not even an explicit nil
func (o *LocationFields) UnsetSensory() {
	o.Sensory.Unset()
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetProperties() string {
	if o == nil || IsNil(o.Properties.Get()) {
		var ret string
		return ret
	}
	return *o.Properties.Get()
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetPropertiesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Get(), o.Properties.IsSet()
}

// HasProperties returns a boolean if a field has been set.
func (o *LocationFields) HasProperties() bool {
	if o != nil && o.Properties.IsSet() {
		return true
	}

	return false
}

// SetProperties gets a reference to the given NullableString and assigns it to the Properties field.
func (o *LocationFields) SetProperties(v string) {
	o.Properties.Set(&v)
}
// SetPropertiesNil sets the value for Properties to be an explicit nil
func (o *LocationFields) SetPropertiesNil() {
	o.Properties.Set(nil)
}

// UnsetProperties ensures that no value is present for Properties, not even an explicit nil
func (o *LocationFields) UnsetProperties() {
	o.Properties.Unset()
}

// GetContents returns the Contents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetContents() string {
	if o == nil || IsNil(o.Contents.Get()) {
		var ret string
		return ret
	}
	return *o.Contents.Get()
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetContentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contents.Get(), o.Contents.IsSet()
}

// HasContents returns a boolean if a field has been set.
func (o *LocationFields) HasContents() bool {
	if o != nil && o.Contents.IsSet() {
		return true
	}

	return false
}

// SetContents gets a reference to the given NullableString and assigns it to the Contents field.
func (o *LocationFields) SetContents(v string) {
	o.Contents.Set(&v)
}
// SetContentsNil sets the value for Contents to be an explicit nil
func (o *LocationFields) SetContentsNil() {
	o.Contents.Set(nil)
}

// UnsetContents ensures that no value is present for Contents, not even an explicit nil
func (o *LocationFields) UnsetContents() {
	o.Contents.Unset()
}

// GetPointOfInterest returns the PointOfInterest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetPointOfInterest() string {
	if o == nil || IsNil(o.PointOfInterest.Get()) {
		var ret string
		return ret
	}
	return *o.PointOfInterest.Get()
}

// GetPointOfInterestOk returns a tuple with the PointOfInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetPointOfInterestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PointOfInterest.Get(), o.PointOfInterest.IsSet()
}

// HasPointOfInterest returns a boolean if a field has been set.
func (o *LocationFields) HasPointOfInterest() bool {
	if o != nil && o.PointOfInterest.IsSet() {
		return true
	}

	return false
}

// SetPointOfInterest gets a reference to the given NullableString and assigns it to the PointOfInterest field.
func (o *LocationFields) SetPointOfInterest(v string) {
	o.PointOfInterest.Set(&v)
}
// SetPointOfInterestNil sets the value for PointOfInterest to be an explicit nil
func (o *LocationFields) SetPointOfInterestNil() {
	o.PointOfInterest.Set(nil)
}

// UnsetPointOfInterest ensures that no value is present for PointOfInterest, not even an explicit nil
func (o *LocationFields) UnsetPointOfInterest() {
	o.PointOfInterest.Unset()
}

// GetDistrict returns the District field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationFields) GetDistrict() string {
	if o == nil || IsNil(o.District.Get()) {
		var ret string
		return ret
	}
	return *o.District.Get()
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationFields) GetDistrictOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.District.Get(), o.District.IsSet()
}

// HasDistrict returns a boolean if a field has been set.
func (o *LocationFields) HasDistrict() bool {
	if o != nil && o.District.IsSet() {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given NullableString and assigns it to the District field.
func (o *LocationFields) SetDistrict(v string) {
	o.District.Set(&v)
}
// SetDistrictNil sets the value for District to be an explicit nil
func (o *LocationFields) SetDistrictNil() {
	o.District.Set(nil)
}

// UnsetDistrict ensures that no value is present for District, not even an explicit nil
func (o *LocationFields) UnsetDistrict() {
	o.District.Unset()
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *LocationFields) GetParent() Object {
	if o == nil || IsNil(o.Parent) {
		var ret Object
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationFields) GetParentOk() (*Object, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *LocationFields) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given Object and assigns it to the Parent field.
func (o *LocationFields) SetParent(v Object) {
	o.Parent = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LocationFields) GetType() LocationType {
	if o == nil || IsNil(o.Type) {
		var ret LocationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationFields) GetTypeOk() (*LocationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LocationFields) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given LocationType and assigns it to the Type field.
func (o *LocationFields) SetType(v LocationType) {
	o.Type = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *LocationFields) GetPerson() Object {
	if o == nil || IsNil(o.Person) {
		var ret Object
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationFields) GetPersonOk() (*Object, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *LocationFields) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given Object and assigns it to the Person field.
func (o *LocationFields) SetPerson(v Object) {
	o.Person = &v
}

// GetVehicle returns the Vehicle field value if set, zero value otherwise.
func (o *LocationFields) GetVehicle() Object {
	if o == nil || IsNil(o.Vehicle) {
		var ret Object
		return ret
	}
	return *o.Vehicle
}

// GetVehicleOk returns a tuple with the Vehicle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationFields) GetVehicleOk() (*Object, bool) {
	if o == nil || IsNil(o.Vehicle) {
		return nil, false
	}
	return o.Vehicle, true
}

// HasVehicle returns a boolean if a field has been set.
func (o *LocationFields) HasVehicle() bool {
	if o != nil && !IsNil(o.Vehicle) {
		return true
	}

	return false
}

// SetVehicle gets a reference to the given Object and assigns it to the Vehicle field.
func (o *LocationFields) SetVehicle(v Object) {
	o.Vehicle = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *LocationFields) GetRank() Object {
	if o == nil || IsNil(o.Rank) {
		var ret Object
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationFields) GetRankOk() (*Object, bool) {
	if o == nil || IsNil(o.Rank) {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *LocationFields) HasRank() bool {
	if o != nil && !IsNil(o.Rank) {
		return true
	}

	return false
}

// SetRank gets a reference to the given Object and assigns it to the Rank field.
func (o *LocationFields) SetRank(v Object) {
	o.Rank = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *LocationFields) GetOrganization() Object {
	if o == nil || IsNil(o.Organization) {
		var ret Object
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationFields) GetOrganizationOk() (*Object, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *LocationFields) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given Object and assigns it to the Organization field.
func (o *LocationFields) SetOrganization(v Object) {
	o.Organization = &v
}

// GetAdditionalRulers returns the AdditionalRulers field value if set, zero value otherwise.
func (o *LocationFields) GetAdditionalRulers() []Object {
	if o == nil || IsNil(o.AdditionalRulers) {
		var ret []Object
		return ret
	}
	return o.AdditionalRulers
}

// GetAdditionalRulersOk returns a tuple with the AdditionalRulers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationFields) GetAdditionalRulersOk() ([]Object, bool) {
	if o == nil || IsNil(o.AdditionalRulers) {
		return nil, false
	}
	return o.AdditionalRulers, true
}

// HasAdditionalRulers returns a boolean if a field has been set.
func (o *LocationFields) HasAdditionalRulers() bool {
	if o != nil && !IsNil(o.AdditionalRulers) {
		return true
	}

	return false
}

// SetAdditionalRulers gets a reference to the given []Object and assigns it to the AdditionalRulers field.
func (o *LocationFields) SetAdditionalRulers(v []Object) {
	o.AdditionalRulers = v
}

// GetContenders returns the Contenders field value if set, zero value otherwise.
func (o *LocationFields) GetContenders() []Object {
	if o == nil || IsNil(o.Contenders) {
		var ret []Object
		return ret
	}
	return o.Contenders
}

// GetContendersOk returns a tuple with the Contenders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationFields) GetContendersOk() ([]Object, bool) {
	if o == nil || IsNil(o.Contenders) {
		return nil, false
	}
	return o.Contenders, true
}

// HasContenders returns a boolean if a field has been set.
func (o *LocationFields) HasContenders() bool {
	if o != nil && !IsNil(o.Contenders) {
		return true
	}

	return false
}

// SetContenders gets a reference to the given []Object and assigns it to the Contenders field.
func (o *LocationFields) SetContenders(v []Object) {
	o.Contenders = v
}

// GetConnectedRooms returns the ConnectedRooms field value if set, zero value otherwise.
func (o *LocationFields) GetConnectedRooms() []Object {
	if o == nil || IsNil(o.ConnectedRooms) {
		var ret []Object
		return ret
	}
	return o.ConnectedRooms
}

// GetConnectedRoomsOk returns a tuple with the ConnectedRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationFields) GetConnectedRoomsOk() ([]Object, bool) {
	if o == nil || IsNil(o.ConnectedRooms) {
		return nil, false
	}
	return o.ConnectedRooms, true
}

// HasConnectedRooms returns a boolean if a field has been set.
func (o *LocationFields) HasConnectedRooms() bool {
	if o != nil && !IsNil(o.ConnectedRooms) {
		return true
	}

	return false
}

// SetConnectedRooms gets a reference to the given []Object and assigns it to the ConnectedRooms field.
func (o *LocationFields) SetConnectedRooms(v []Object) {
	o.ConnectedRooms = v
}

func (o LocationFields) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Alternativename.IsSet() {
		toSerialize["alternativename"] = o.Alternativename.Get()
	}
	if o.Geography.IsSet() {
		toSerialize["geography"] = o.Geography.Get()
	}
	if o.Naturalresources.IsSet() {
		toSerialize["naturalresources"] = o.Naturalresources.Get()
	}
	if o.Population.IsSet() {
		toSerialize["population"] = o.Population.Get()
	}
	if o.AreaSize.IsSet() {
		toSerialize["areaSize"] = o.AreaSize.Get()
	}
	if o.Demographics.IsSet() {
		toSerialize["demographics"] = o.Demographics.Get()
	}
	if o.Demonym.IsSet() {
		toSerialize["demonym"] = o.Demonym.Get()
	}
	if o.Defences.IsSet() {
		toSerialize["defences"] = o.Defences.Get()
	}
	if o.Infrastructure.IsSet() {
		toSerialize["infrastructure"] = o.Infrastructure.Get()
	}
	if o.Guilds.IsSet() {
		toSerialize["guilds"] = o.Guilds.Get()
	}
	if o.History.IsSet() {
		toSerialize["history"] = o.History.Get()
	}
	if o.Tourism.IsSet() {
		toSerialize["tourism"] = o.Tourism.Get()
	}
	if o.Industry.IsSet() {
		toSerialize["industry"] = o.Industry.Get()
	}
	if o.Architecture.IsSet() {
		toSerialize["architecture"] = o.Architecture.Get()
	}
	if o.Government.IsSet() {
		toSerialize["government"] = o.Government.Get()
	}
	if o.Assets.IsSet() {
		toSerialize["assets"] = o.Assets.Get()
	}
	if o.LocationTemplateType.IsSet() {
		toSerialize["locationTemplateType"] = o.LocationTemplateType.Get()
	}
	if o.Constructed.IsSet() {
		toSerialize["constructed"] = o.Constructed.Get()
	}
	if o.Ruined.IsSet() {
		toSerialize["ruined"] = o.Ruined.Get()
	}
	if o.Florafauna.IsSet() {
		toSerialize["florafauna"] = o.Florafauna.Get()
	}
	if o.Ecosystem.IsSet() {
		toSerialize["ecosystem"] = o.Ecosystem.Get()
	}
	if o.EcosystemCycles.IsSet() {
		toSerialize["ecosystemCycles"] = o.EcosystemCycles.Get()
	}
	if o.LocalizedPhenomena.IsSet() {
		toSerialize["localizedPhenomena"] = o.LocalizedPhenomena.Get()
	}
	if o.Climate.IsSet() {
		toSerialize["climate"] = o.Climate.Get()
	}
	if o.Alterations.IsSet() {
		toSerialize["alterations"] = o.Alterations.Get()
	}
	if o.Purpose.IsSet() {
		toSerialize["purpose"] = o.Purpose.Get()
	}
	if o.Design.IsSet() {
		toSerialize["design"] = o.Design.Get()
	}
	if o.Entries.IsSet() {
		toSerialize["entries"] = o.Entries.Get()
	}
	if o.Denizens.IsSet() {
		toSerialize["denizens"] = o.Denizens.Get()
	}
	if o.Valuables.IsSet() {
		toSerialize["valuables"] = o.Valuables.Get()
	}
	if o.Hazards.IsSet() {
		toSerialize["hazards"] = o.Hazards.Get()
	}
	if o.Effects.IsSet() {
		toSerialize["effects"] = o.Effects.Get()
	}
	if o.Sensory.IsSet() {
		toSerialize["sensory"] = o.Sensory.Get()
	}
	if o.Properties.IsSet() {
		toSerialize["properties"] = o.Properties.Get()
	}
	if o.Contents.IsSet() {
		toSerialize["contents"] = o.Contents.Get()
	}
	if o.PointOfInterest.IsSet() {
		toSerialize["pointOfInterest"] = o.PointOfInterest.Get()
	}
	if o.District.IsSet() {
		toSerialize["district"] = o.District.Get()
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	if !IsNil(o.Vehicle) {
		toSerialize["vehicle"] = o.Vehicle
	}
	if !IsNil(o.Rank) {
		toSerialize["rank"] = o.Rank
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.AdditionalRulers) {
		toSerialize["additionalRulers"] = o.AdditionalRulers
	}
	if !IsNil(o.Contenders) {
		toSerialize["contenders"] = o.Contenders
	}
	if !IsNil(o.ConnectedRooms) {
		toSerialize["connectedRooms"] = o.ConnectedRooms
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocationFields) UnmarshalJSON(data []byte) (err error) {
	varLocationFields := _LocationFields{}

	err = json.Unmarshal(data, &varLocationFields)

	if err != nil {
		return err
	}

	*o = LocationFields(varLocationFields)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alternativename")
		delete(additionalProperties, "geography")
		delete(additionalProperties, "naturalresources")
		delete(additionalProperties, "population")
		delete(additionalProperties, "areaSize")
		delete(additionalProperties, "demographics")
		delete(additionalProperties, "demonym")
		delete(additionalProperties, "defences")
		delete(additionalProperties, "infrastructure")
		delete(additionalProperties, "guilds")
		delete(additionalProperties, "history")
		delete(additionalProperties, "tourism")
		delete(additionalProperties, "industry")
		delete(additionalProperties, "architecture")
		delete(additionalProperties, "government")
		delete(additionalProperties, "assets")
		delete(additionalProperties, "locationTemplateType")
		delete(additionalProperties, "constructed")
		delete(additionalProperties, "ruined")
		delete(additionalProperties, "florafauna")
		delete(additionalProperties, "ecosystem")
		delete(additionalProperties, "ecosystemCycles")
		delete(additionalProperties, "localizedPhenomena")
		delete(additionalProperties, "climate")
		delete(additionalProperties, "alterations")
		delete(additionalProperties, "purpose")
		delete(additionalProperties, "design")
		delete(additionalProperties, "entries")
		delete(additionalProperties, "denizens")
		delete(additionalProperties, "valuables")
		delete(additionalProperties, "hazards")
		delete(additionalProperties, "effects")
		delete(additionalProperties, "sensory")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "contents")
		delete(additionalProperties, "pointOfInterest")
		delete(additionalProperties, "district")
		delete(additionalProperties, "parent")
		delete(additionalProperties, "type")
		delete(additionalProperties, "person")
		delete(additionalProperties, "vehicle")
		delete(additionalProperties, "rank")
		delete(additionalProperties, "organization")
		delete(additionalProperties, "additionalRulers")
		delete(additionalProperties, "contenders")
		delete(additionalProperties, "connectedRooms")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocationFields struct {
	value *LocationFields
	isSet bool
}

func (v NullableLocationFields) Get() *LocationFields {
	return v.value
}

func (v *NullableLocationFields) Set(val *LocationFields) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationFields) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationFields(val *LocationFields) *NullableLocationFields {
	return &NullableLocationFields{value: val, isSet: true}
}

func (v NullableLocationFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


