/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
	"fmt"
)

// checks if the Articles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Articles{}

// Articles struct for Articles
type Articles struct {
	Limit string `json:"limit"`
	Offset string `json:"offset"`
	Category *ArticlesCategory `json:"category,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Articles Articles

// NewArticles instantiates a new Articles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticles(limit string, offset string) *Articles {
	this := Articles{}
	this.Limit = limit
	this.Offset = offset
	return &this
}

// NewArticlesWithDefaults instantiates a new Articles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticlesWithDefaults() *Articles {
	this := Articles{}
	return &this
}

// GetLimit returns the Limit field value
func (o *Articles) GetLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *Articles) GetLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *Articles) SetLimit(v string) {
	o.Limit = v
}

// GetOffset returns the Offset field value
func (o *Articles) GetOffset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *Articles) GetOffsetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *Articles) SetOffset(v string) {
	o.Offset = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Articles) GetCategory() ArticlesCategory {
	if o == nil || IsNil(o.Category) {
		var ret ArticlesCategory
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Articles) GetCategoryOk() (*ArticlesCategory, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Articles) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given ArticlesCategory and assigns it to the Category field.
func (o *Articles) SetCategory(v ArticlesCategory) {
	o.Category = &v
}

func (o Articles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Articles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit"] = o.Limit
	toSerialize["offset"] = o.Offset
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Articles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit",
		"offset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArticles := _Articles{}

	err = json.Unmarshal(data, &varArticles)

	if err != nil {
		return err
	}

	*o = Articles(varArticles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "limit")
		delete(additionalProperties, "offset")
		delete(additionalProperties, "category")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArticles struct {
	value *Articles
	isSet bool
}

func (v NullableArticles) Get() *Articles {
	return v.value
}

func (v *NullableArticles) Set(val *Articles) {
	v.value = val
	v.isSet = true
}

func (v NullableArticles) IsSet() bool {
	return v.isSet
}

func (v *NullableArticles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticles(val *Articles) *NullableArticles {
	return &NullableArticles{value: val, isSet: true}
}

func (v NullableArticles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


