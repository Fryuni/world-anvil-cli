/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ReadArticle200Response - struct for ReadArticle200Response
type ReadArticle200Response struct {
	ArticleGeneric *ArticleGeneric
	ArticleGenericExtended *ArticleGenericExtended
	ArticleGenericFull *ArticleGenericFull
	ArticleGenericFullPlus *ArticleGenericFullPlus
	ArticleReturnRef *ArticleReturnRef
	LocationFields *LocationFields
}

// ArticleGenericAsReadArticle200Response is a convenience function that returns ArticleGeneric wrapped in ReadArticle200Response
func ArticleGenericAsReadArticle200Response(v *ArticleGeneric) ReadArticle200Response {
	return ReadArticle200Response{
		ArticleGeneric: v,
	}
}

// ArticleGenericExtendedAsReadArticle200Response is a convenience function that returns ArticleGenericExtended wrapped in ReadArticle200Response
func ArticleGenericExtendedAsReadArticle200Response(v *ArticleGenericExtended) ReadArticle200Response {
	return ReadArticle200Response{
		ArticleGenericExtended: v,
	}
}

// ArticleGenericFullAsReadArticle200Response is a convenience function that returns ArticleGenericFull wrapped in ReadArticle200Response
func ArticleGenericFullAsReadArticle200Response(v *ArticleGenericFull) ReadArticle200Response {
	return ReadArticle200Response{
		ArticleGenericFull: v,
	}
}

// ArticleGenericFullPlusAsReadArticle200Response is a convenience function that returns ArticleGenericFullPlus wrapped in ReadArticle200Response
func ArticleGenericFullPlusAsReadArticle200Response(v *ArticleGenericFullPlus) ReadArticle200Response {
	return ReadArticle200Response{
		ArticleGenericFullPlus: v,
	}
}

// ArticleReturnRefAsReadArticle200Response is a convenience function that returns ArticleReturnRef wrapped in ReadArticle200Response
func ArticleReturnRefAsReadArticle200Response(v *ArticleReturnRef) ReadArticle200Response {
	return ReadArticle200Response{
		ArticleReturnRef: v,
	}
}

// LocationFieldsAsReadArticle200Response is a convenience function that returns LocationFields wrapped in ReadArticle200Response
func LocationFieldsAsReadArticle200Response(v *LocationFields) ReadArticle200Response {
	return ReadArticle200Response{
		LocationFields: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReadArticle200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArticleGeneric
	err = newStrictDecoder(data).Decode(&dst.ArticleGeneric)
	if err == nil {
		jsonArticleGeneric, _ := json.Marshal(dst.ArticleGeneric)
		if string(jsonArticleGeneric) == "{}" { // empty struct
			dst.ArticleGeneric = nil
		} else {
			if err = validator.Validate(dst.ArticleGeneric); err != nil {
				dst.ArticleGeneric = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArticleGeneric = nil
	}

	// try to unmarshal data into ArticleGenericExtended
	err = newStrictDecoder(data).Decode(&dst.ArticleGenericExtended)
	if err == nil {
		jsonArticleGenericExtended, _ := json.Marshal(dst.ArticleGenericExtended)
		if string(jsonArticleGenericExtended) == "{}" { // empty struct
			dst.ArticleGenericExtended = nil
		} else {
			if err = validator.Validate(dst.ArticleGenericExtended); err != nil {
				dst.ArticleGenericExtended = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArticleGenericExtended = nil
	}

	// try to unmarshal data into ArticleGenericFull
	err = newStrictDecoder(data).Decode(&dst.ArticleGenericFull)
	if err == nil {
		jsonArticleGenericFull, _ := json.Marshal(dst.ArticleGenericFull)
		if string(jsonArticleGenericFull) == "{}" { // empty struct
			dst.ArticleGenericFull = nil
		} else {
			if err = validator.Validate(dst.ArticleGenericFull); err != nil {
				dst.ArticleGenericFull = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArticleGenericFull = nil
	}

	// try to unmarshal data into ArticleGenericFullPlus
	err = newStrictDecoder(data).Decode(&dst.ArticleGenericFullPlus)
	if err == nil {
		jsonArticleGenericFullPlus, _ := json.Marshal(dst.ArticleGenericFullPlus)
		if string(jsonArticleGenericFullPlus) == "{}" { // empty struct
			dst.ArticleGenericFullPlus = nil
		} else {
			if err = validator.Validate(dst.ArticleGenericFullPlus); err != nil {
				dst.ArticleGenericFullPlus = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArticleGenericFullPlus = nil
	}

	// try to unmarshal data into ArticleReturnRef
	err = newStrictDecoder(data).Decode(&dst.ArticleReturnRef)
	if err == nil {
		jsonArticleReturnRef, _ := json.Marshal(dst.ArticleReturnRef)
		if string(jsonArticleReturnRef) == "{}" { // empty struct
			dst.ArticleReturnRef = nil
		} else {
			if err = validator.Validate(dst.ArticleReturnRef); err != nil {
				dst.ArticleReturnRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArticleReturnRef = nil
	}

	// try to unmarshal data into LocationFields
	err = newStrictDecoder(data).Decode(&dst.LocationFields)
	if err == nil {
		jsonLocationFields, _ := json.Marshal(dst.LocationFields)
		if string(jsonLocationFields) == "{}" { // empty struct
			dst.LocationFields = nil
		} else {
			if err = validator.Validate(dst.LocationFields); err != nil {
				dst.LocationFields = nil
			} else {
				match++
			}
		}
	} else {
		dst.LocationFields = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArticleGeneric = nil
		dst.ArticleGenericExtended = nil
		dst.ArticleGenericFull = nil
		dst.ArticleGenericFullPlus = nil
		dst.ArticleReturnRef = nil
		dst.LocationFields = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReadArticle200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReadArticle200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReadArticle200Response) MarshalJSON() ([]byte, error) {
	if src.ArticleGeneric != nil {
		return json.Marshal(&src.ArticleGeneric)
	}

	if src.ArticleGenericExtended != nil {
		return json.Marshal(&src.ArticleGenericExtended)
	}

	if src.ArticleGenericFull != nil {
		return json.Marshal(&src.ArticleGenericFull)
	}

	if src.ArticleGenericFullPlus != nil {
		return json.Marshal(&src.ArticleGenericFullPlus)
	}

	if src.ArticleReturnRef != nil {
		return json.Marshal(&src.ArticleReturnRef)
	}

	if src.LocationFields != nil {
		return json.Marshal(&src.LocationFields)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReadArticle200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArticleGeneric != nil {
		return obj.ArticleGeneric
	}

	if obj.ArticleGenericExtended != nil {
		return obj.ArticleGenericExtended
	}

	if obj.ArticleGenericFull != nil {
		return obj.ArticleGenericFull
	}

	if obj.ArticleGenericFullPlus != nil {
		return obj.ArticleGenericFullPlus
	}

	if obj.ArticleReturnRef != nil {
		return obj.ArticleReturnRef
	}

	if obj.LocationFields != nil {
		return obj.LocationFields
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ReadArticle200Response) GetActualInstanceValue() (interface{}) {
	if obj.ArticleGeneric != nil {
		return *obj.ArticleGeneric
	}

	if obj.ArticleGenericExtended != nil {
		return *obj.ArticleGenericExtended
	}

	if obj.ArticleGenericFull != nil {
		return *obj.ArticleGenericFull
	}

	if obj.ArticleGenericFullPlus != nil {
		return *obj.ArticleGenericFullPlus
	}

	if obj.ArticleReturnRef != nil {
		return *obj.ArticleReturnRef
	}

	if obj.LocationFields != nil {
		return *obj.LocationFields
	}

	// all schemas are nil
	return nil
}

type NullableReadArticle200Response struct {
	value *ReadArticle200Response
	isSet bool
}

func (v NullableReadArticle200Response) Get() *ReadArticle200Response {
	return v.value
}

func (v *NullableReadArticle200Response) Set(val *ReadArticle200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableReadArticle200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableReadArticle200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadArticle200Response(val *ReadArticle200Response) *NullableReadArticle200Response {
	return &NullableReadArticle200Response{value: val, isSet: true}
}

func (v NullableReadArticle200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadArticle200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


