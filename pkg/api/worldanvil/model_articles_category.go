/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
)

// checks if the ArticlesCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArticlesCategory{}

// ArticlesCategory struct for ArticlesCategory
type ArticlesCategory struct {
	Id *string `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ArticlesCategory ArticlesCategory

// NewArticlesCategory instantiates a new ArticlesCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticlesCategory() *ArticlesCategory {
	this := ArticlesCategory{}
	return &this
}

// NewArticlesCategoryWithDefaults instantiates a new ArticlesCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticlesCategoryWithDefaults() *ArticlesCategory {
	this := ArticlesCategory{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArticlesCategory) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticlesCategory) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArticlesCategory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ArticlesCategory) SetId(v string) {
	o.Id = &v
}

func (o ArticlesCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArticlesCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArticlesCategory) UnmarshalJSON(data []byte) (err error) {
	varArticlesCategory := _ArticlesCategory{}

	err = json.Unmarshal(data, &varArticlesCategory)

	if err != nil {
		return err
	}

	*o = ArticlesCategory(varArticlesCategory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArticlesCategory struct {
	value *ArticlesCategory
	isSet bool
}

func (v NullableArticlesCategory) Get() *ArticlesCategory {
	return v.value
}

func (v *NullableArticlesCategory) Set(val *ArticlesCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableArticlesCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableArticlesCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticlesCategory(val *ArticlesCategory) *NullableArticlesCategory {
	return &NullableArticlesCategory{value: val, isSet: true}
}

func (v NullableArticlesCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticlesCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


