/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
	"fmt"
)

// checks if the BlockFolderCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockFolderCreate{}

// BlockFolderCreate struct for BlockFolderCreate
type BlockFolderCreate struct {
	Id *int32 `json:"id,omitempty"`
	Title string `json:"title"`
	Slug NullableString `json:"slug,omitempty"`
	State NullableString `json:"state,omitempty"`
	IsWip NullableString `json:"isWip,omitempty"`
	IsDraft NullableString `json:"isDraft,omitempty"`
	EntityClass *string `json:"entityClass,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
	Url NullableString `json:"url,omitempty"`
	Subscribergroups []string `json:"subscribergroups,omitempty"`
	FolderId NullableString `json:"folderId,omitempty"`
	Tags NullableString `json:"tags,omitempty"`
	UpdateDate *Object `json:"updateDate,omitempty"`
	IsEditable *bool `json:"isEditable,omitempty"`
	Success *bool `json:"success,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	Author *ArticleGenericUpdateObjectPropertiesManuscriptsInner `json:"author,omitempty"`
	World ArticleGenericUpdateObjectPropertiesManuscriptsInner `json:"world"`
	AdditionalProperties map[string]interface{}
}

type _BlockFolderCreate BlockFolderCreate

// NewBlockFolderCreate instantiates a new BlockFolderCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockFolderCreate(title string, world ArticleGenericUpdateObjectPropertiesManuscriptsInner) *BlockFolderCreate {
	this := BlockFolderCreate{}
	this.Title = title
	this.World = world
	return &this
}

// NewBlockFolderCreateWithDefaults instantiates a new BlockFolderCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockFolderCreateWithDefaults() *BlockFolderCreate {
	this := BlockFolderCreate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BlockFolderCreate) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BlockFolderCreate) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value
func (o *BlockFolderCreate) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *BlockFolderCreate) SetTitle(v string) {
	o.Title = v
}

// GetSlug returns the Slug field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockFolderCreate) GetSlug() string {
	if o == nil || IsNil(o.Slug.Get()) {
		var ret string
		return ret
	}
	return *o.Slug.Get()
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockFolderCreate) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slug.Get(), o.Slug.IsSet()
}

// HasSlug returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasSlug() bool {
	if o != nil && o.Slug.IsSet() {
		return true
	}

	return false
}

// SetSlug gets a reference to the given NullableString and assigns it to the Slug field.
func (o *BlockFolderCreate) SetSlug(v string) {
	o.Slug.Set(&v)
}
// SetSlugNil sets the value for Slug to be an explicit nil
func (o *BlockFolderCreate) SetSlugNil() {
	o.Slug.Set(nil)
}

// UnsetSlug ensures that no value is present for Slug, not even an explicit nil
func (o *BlockFolderCreate) UnsetSlug() {
	o.Slug.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockFolderCreate) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockFolderCreate) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *BlockFolderCreate) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *BlockFolderCreate) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *BlockFolderCreate) UnsetState() {
	o.State.Unset()
}

// GetIsWip returns the IsWip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockFolderCreate) GetIsWip() string {
	if o == nil || IsNil(o.IsWip.Get()) {
		var ret string
		return ret
	}
	return *o.IsWip.Get()
}

// GetIsWipOk returns a tuple with the IsWip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockFolderCreate) GetIsWipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsWip.Get(), o.IsWip.IsSet()
}

// HasIsWip returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasIsWip() bool {
	if o != nil && o.IsWip.IsSet() {
		return true
	}

	return false
}

// SetIsWip gets a reference to the given NullableString and assigns it to the IsWip field.
func (o *BlockFolderCreate) SetIsWip(v string) {
	o.IsWip.Set(&v)
}
// SetIsWipNil sets the value for IsWip to be an explicit nil
func (o *BlockFolderCreate) SetIsWipNil() {
	o.IsWip.Set(nil)
}

// UnsetIsWip ensures that no value is present for IsWip, not even an explicit nil
func (o *BlockFolderCreate) UnsetIsWip() {
	o.IsWip.Unset()
}

// GetIsDraft returns the IsDraft field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockFolderCreate) GetIsDraft() string {
	if o == nil || IsNil(o.IsDraft.Get()) {
		var ret string
		return ret
	}
	return *o.IsDraft.Get()
}

// GetIsDraftOk returns a tuple with the IsDraft field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockFolderCreate) GetIsDraftOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDraft.Get(), o.IsDraft.IsSet()
}

// HasIsDraft returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasIsDraft() bool {
	if o != nil && o.IsDraft.IsSet() {
		return true
	}

	return false
}

// SetIsDraft gets a reference to the given NullableString and assigns it to the IsDraft field.
func (o *BlockFolderCreate) SetIsDraft(v string) {
	o.IsDraft.Set(&v)
}
// SetIsDraftNil sets the value for IsDraft to be an explicit nil
func (o *BlockFolderCreate) SetIsDraftNil() {
	o.IsDraft.Set(nil)
}

// UnsetIsDraft ensures that no value is present for IsDraft, not even an explicit nil
func (o *BlockFolderCreate) UnsetIsDraft() {
	o.IsDraft.Unset()
}

// GetEntityClass returns the EntityClass field value if set, zero value otherwise.
func (o *BlockFolderCreate) GetEntityClass() string {
	if o == nil || IsNil(o.EntityClass) {
		var ret string
		return ret
	}
	return *o.EntityClass
}

// GetEntityClassOk returns a tuple with the EntityClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetEntityClassOk() (*string, bool) {
	if o == nil || IsNil(o.EntityClass) {
		return nil, false
	}
	return o.EntityClass, true
}

// HasEntityClass returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasEntityClass() bool {
	if o != nil && !IsNil(o.EntityClass) {
		return true
	}

	return false
}

// SetEntityClass gets a reference to the given string and assigns it to the EntityClass field.
func (o *BlockFolderCreate) SetEntityClass(v string) {
	o.EntityClass = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockFolderCreate) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockFolderCreate) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *BlockFolderCreate) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *BlockFolderCreate) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *BlockFolderCreate) UnsetIcon() {
	o.Icon.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockFolderCreate) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockFolderCreate) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *BlockFolderCreate) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *BlockFolderCreate) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *BlockFolderCreate) UnsetUrl() {
	o.Url.Unset()
}

// GetSubscribergroups returns the Subscribergroups field value if set, zero value otherwise.
func (o *BlockFolderCreate) GetSubscribergroups() []string {
	if o == nil || IsNil(o.Subscribergroups) {
		var ret []string
		return ret
	}
	return o.Subscribergroups
}

// GetSubscribergroupsOk returns a tuple with the Subscribergroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetSubscribergroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subscribergroups) {
		return nil, false
	}
	return o.Subscribergroups, true
}

// HasSubscribergroups returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasSubscribergroups() bool {
	if o != nil && !IsNil(o.Subscribergroups) {
		return true
	}

	return false
}

// SetSubscribergroups gets a reference to the given []string and assigns it to the Subscribergroups field.
func (o *BlockFolderCreate) SetSubscribergroups(v []string) {
	o.Subscribergroups = v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockFolderCreate) GetFolderId() string {
	if o == nil || IsNil(o.FolderId.Get()) {
		var ret string
		return ret
	}
	return *o.FolderId.Get()
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockFolderCreate) GetFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FolderId.Get(), o.FolderId.IsSet()
}

// HasFolderId returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasFolderId() bool {
	if o != nil && o.FolderId.IsSet() {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given NullableString and assigns it to the FolderId field.
func (o *BlockFolderCreate) SetFolderId(v string) {
	o.FolderId.Set(&v)
}
// SetFolderIdNil sets the value for FolderId to be an explicit nil
func (o *BlockFolderCreate) SetFolderIdNil() {
	o.FolderId.Set(nil)
}

// UnsetFolderId ensures that no value is present for FolderId, not even an explicit nil
func (o *BlockFolderCreate) UnsetFolderId() {
	o.FolderId.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockFolderCreate) GetTags() string {
	if o == nil || IsNil(o.Tags.Get()) {
		var ret string
		return ret
	}
	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockFolderCreate) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// HasTags returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasTags() bool {
	if o != nil && o.Tags.IsSet() {
		return true
	}

	return false
}

// SetTags gets a reference to the given NullableString and assigns it to the Tags field.
func (o *BlockFolderCreate) SetTags(v string) {
	o.Tags.Set(&v)
}
// SetTagsNil sets the value for Tags to be an explicit nil
func (o *BlockFolderCreate) SetTagsNil() {
	o.Tags.Set(nil)
}

// UnsetTags ensures that no value is present for Tags, not even an explicit nil
func (o *BlockFolderCreate) UnsetTags() {
	o.Tags.Unset()
}

// GetUpdateDate returns the UpdateDate field value if set, zero value otherwise.
func (o *BlockFolderCreate) GetUpdateDate() Object {
	if o == nil || IsNil(o.UpdateDate) {
		var ret Object
		return ret
	}
	return *o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetUpdateDateOk() (*Object, bool) {
	if o == nil || IsNil(o.UpdateDate) {
		return nil, false
	}
	return o.UpdateDate, true
}

// HasUpdateDate returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasUpdateDate() bool {
	if o != nil && !IsNil(o.UpdateDate) {
		return true
	}

	return false
}

// SetUpdateDate gets a reference to the given Object and assigns it to the UpdateDate field.
func (o *BlockFolderCreate) SetUpdateDate(v Object) {
	o.UpdateDate = &v
}

// GetIsEditable returns the IsEditable field value if set, zero value otherwise.
func (o *BlockFolderCreate) GetIsEditable() bool {
	if o == nil || IsNil(o.IsEditable) {
		var ret bool
		return ret
	}
	return *o.IsEditable
}

// GetIsEditableOk returns a tuple with the IsEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetIsEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEditable) {
		return nil, false
	}
	return o.IsEditable, true
}

// HasIsEditable returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasIsEditable() bool {
	if o != nil && !IsNil(o.IsEditable) {
		return true
	}

	return false
}

// SetIsEditable gets a reference to the given bool and assigns it to the IsEditable field.
func (o *BlockFolderCreate) SetIsEditable(v bool) {
	o.IsEditable = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *BlockFolderCreate) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *BlockFolderCreate) SetSuccess(v bool) {
	o.Success = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *BlockFolderCreate) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *BlockFolderCreate) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *BlockFolderCreate) GetAuthor() ArticleGenericUpdateObjectPropertiesManuscriptsInner {
	if o == nil || IsNil(o.Author) {
		var ret ArticleGenericUpdateObjectPropertiesManuscriptsInner
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetAuthorOk() (*ArticleGenericUpdateObjectPropertiesManuscriptsInner, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *BlockFolderCreate) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given ArticleGenericUpdateObjectPropertiesManuscriptsInner and assigns it to the Author field.
func (o *BlockFolderCreate) SetAuthor(v ArticleGenericUpdateObjectPropertiesManuscriptsInner) {
	o.Author = &v
}

// GetWorld returns the World field value
func (o *BlockFolderCreate) GetWorld() ArticleGenericUpdateObjectPropertiesManuscriptsInner {
	if o == nil {
		var ret ArticleGenericUpdateObjectPropertiesManuscriptsInner
		return ret
	}

	return o.World
}

// GetWorldOk returns a tuple with the World field value
// and a boolean to check if the value has been set.
func (o *BlockFolderCreate) GetWorldOk() (*ArticleGenericUpdateObjectPropertiesManuscriptsInner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.World, true
}

// SetWorld sets field value
func (o *BlockFolderCreate) SetWorld(v ArticleGenericUpdateObjectPropertiesManuscriptsInner) {
	o.World = v
}

func (o BlockFolderCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockFolderCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["title"] = o.Title
	if o.Slug.IsSet() {
		toSerialize["slug"] = o.Slug.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.IsWip.IsSet() {
		toSerialize["isWip"] = o.IsWip.Get()
	}
	if o.IsDraft.IsSet() {
		toSerialize["isDraft"] = o.IsDraft.Get()
	}
	if !IsNil(o.EntityClass) {
		toSerialize["entityClass"] = o.EntityClass
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if !IsNil(o.Subscribergroups) {
		toSerialize["subscribergroups"] = o.Subscribergroups
	}
	if o.FolderId.IsSet() {
		toSerialize["folderId"] = o.FolderId.Get()
	}
	if o.Tags.IsSet() {
		toSerialize["tags"] = o.Tags.Get()
	}
	if !IsNil(o.UpdateDate) {
		toSerialize["updateDate"] = o.UpdateDate
	}
	if !IsNil(o.IsEditable) {
		toSerialize["isEditable"] = o.IsEditable
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	toSerialize["world"] = o.World

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BlockFolderCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"world",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockFolderCreate := _BlockFolderCreate{}

	err = json.Unmarshal(data, &varBlockFolderCreate)

	if err != nil {
		return err
	}

	*o = BlockFolderCreate(varBlockFolderCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "title")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "state")
		delete(additionalProperties, "isWip")
		delete(additionalProperties, "isDraft")
		delete(additionalProperties, "entityClass")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "url")
		delete(additionalProperties, "subscribergroups")
		delete(additionalProperties, "folderId")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "updateDate")
		delete(additionalProperties, "isEditable")
		delete(additionalProperties, "success")
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "author")
		delete(additionalProperties, "world")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBlockFolderCreate struct {
	value *BlockFolderCreate
	isSet bool
}

func (v NullableBlockFolderCreate) Get() *BlockFolderCreate {
	return v.value
}

func (v *NullableBlockFolderCreate) Set(val *BlockFolderCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockFolderCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockFolderCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockFolderCreate(val *BlockFolderCreate) *NullableBlockFolderCreate {
	return &NullableBlockFolderCreate{value: val, isSet: true}
}

func (v NullableBlockFolderCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockFolderCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


