/*
World Anvil Public API Documentation

Welcome to the World Anvil Public API Documentation. This API provides developers and World Anvil users with programmatic access to the extensive features of the World Anvil worldbuilding platform. Whether you're building integrations, automating tasks, or creating custom experiences, this API empowers you to interact with your worldbuilding data seamlessly.

API version: 2.0.0 - Boromir
Contact: contact@worldanvil.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldanvil

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ReadBlockTemplate200Response - struct for ReadBlockTemplate200Response
type ReadBlockTemplate200Response struct {
	BlockTemplate *BlockTemplate
	BlockTemplateReturnRef *BlockTemplateReturnRef
	ERRORUNKNOWN *ERRORUNKNOWN
}

// BlockTemplateAsReadBlockTemplate200Response is a convenience function that returns BlockTemplate wrapped in ReadBlockTemplate200Response
func BlockTemplateAsReadBlockTemplate200Response(v *BlockTemplate) ReadBlockTemplate200Response {
	return ReadBlockTemplate200Response{
		BlockTemplate: v,
	}
}

// BlockTemplateReturnRefAsReadBlockTemplate200Response is a convenience function that returns BlockTemplateReturnRef wrapped in ReadBlockTemplate200Response
func BlockTemplateReturnRefAsReadBlockTemplate200Response(v *BlockTemplateReturnRef) ReadBlockTemplate200Response {
	return ReadBlockTemplate200Response{
		BlockTemplateReturnRef: v,
	}
}

// ERRORUNKNOWNAsReadBlockTemplate200Response is a convenience function that returns ERRORUNKNOWN wrapped in ReadBlockTemplate200Response
func ERRORUNKNOWNAsReadBlockTemplate200Response(v *ERRORUNKNOWN) ReadBlockTemplate200Response {
	return ReadBlockTemplate200Response{
		ERRORUNKNOWN: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReadBlockTemplate200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BlockTemplate
	err = newStrictDecoder(data).Decode(&dst.BlockTemplate)
	if err == nil {
		jsonBlockTemplate, _ := json.Marshal(dst.BlockTemplate)
		if string(jsonBlockTemplate) == "{}" { // empty struct
			dst.BlockTemplate = nil
		} else {
			if err = validator.Validate(dst.BlockTemplate); err != nil {
				dst.BlockTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.BlockTemplate = nil
	}

	// try to unmarshal data into BlockTemplateReturnRef
	err = newStrictDecoder(data).Decode(&dst.BlockTemplateReturnRef)
	if err == nil {
		jsonBlockTemplateReturnRef, _ := json.Marshal(dst.BlockTemplateReturnRef)
		if string(jsonBlockTemplateReturnRef) == "{}" { // empty struct
			dst.BlockTemplateReturnRef = nil
		} else {
			if err = validator.Validate(dst.BlockTemplateReturnRef); err != nil {
				dst.BlockTemplateReturnRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.BlockTemplateReturnRef = nil
	}

	// try to unmarshal data into ERRORUNKNOWN
	err = newStrictDecoder(data).Decode(&dst.ERRORUNKNOWN)
	if err == nil {
		jsonERRORUNKNOWN, _ := json.Marshal(dst.ERRORUNKNOWN)
		if string(jsonERRORUNKNOWN) == "{}" { // empty struct
			dst.ERRORUNKNOWN = nil
		} else {
			if err = validator.Validate(dst.ERRORUNKNOWN); err != nil {
				dst.ERRORUNKNOWN = nil
			} else {
				match++
			}
		}
	} else {
		dst.ERRORUNKNOWN = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BlockTemplate = nil
		dst.BlockTemplateReturnRef = nil
		dst.ERRORUNKNOWN = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReadBlockTemplate200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReadBlockTemplate200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReadBlockTemplate200Response) MarshalJSON() ([]byte, error) {
	if src.BlockTemplate != nil {
		return json.Marshal(&src.BlockTemplate)
	}

	if src.BlockTemplateReturnRef != nil {
		return json.Marshal(&src.BlockTemplateReturnRef)
	}

	if src.ERRORUNKNOWN != nil {
		return json.Marshal(&src.ERRORUNKNOWN)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReadBlockTemplate200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BlockTemplate != nil {
		return obj.BlockTemplate
	}

	if obj.BlockTemplateReturnRef != nil {
		return obj.BlockTemplateReturnRef
	}

	if obj.ERRORUNKNOWN != nil {
		return obj.ERRORUNKNOWN
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ReadBlockTemplate200Response) GetActualInstanceValue() (interface{}) {
	if obj.BlockTemplate != nil {
		return *obj.BlockTemplate
	}

	if obj.BlockTemplateReturnRef != nil {
		return *obj.BlockTemplateReturnRef
	}

	if obj.ERRORUNKNOWN != nil {
		return *obj.ERRORUNKNOWN
	}

	// all schemas are nil
	return nil
}

type NullableReadBlockTemplate200Response struct {
	value *ReadBlockTemplate200Response
	isSet bool
}

func (v NullableReadBlockTemplate200Response) Get() *ReadBlockTemplate200Response {
	return v.value
}

func (v *NullableReadBlockTemplate200Response) Set(val *ReadBlockTemplate200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableReadBlockTemplate200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableReadBlockTemplate200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadBlockTemplate200Response(val *ReadBlockTemplate200Response) *NullableReadBlockTemplate200Response {
	return &NullableReadBlockTemplate200Response{value: val, isSet: true}
}

func (v NullableReadBlockTemplate200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadBlockTemplate200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


